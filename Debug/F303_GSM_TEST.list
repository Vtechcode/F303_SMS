
F303_GSM_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004758  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e8  080049e8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080049e8  080049e8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049e8  080049e8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080049f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000031c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000378  20000378  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000aa81  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b9a  00000000  00000000  0002ab50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007b0  00000000  00000000  0002c6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005dd  00000000  00000000  0002cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d203  00000000  00000000  0002d47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b549  00000000  00000000  0004a680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ad5ed  00000000  00000000  00055bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002308  00000000  00000000  001031b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001054c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080048d0 	.word	0x080048d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080048d0 	.word	0x080048d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <checkNetwork>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

int checkNetwork()
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	//AT COMMAND TEST
	memset(AtCommand, 0, strlen(AtCommand));
 8000284:	48a7      	ldr	r0, [pc, #668]	; (8000524 <checkNetwork+0x2a4>)
 8000286:	f7ff ffa3 	bl	80001d0 <strlen>
 800028a:	4603      	mov	r3, r0
 800028c:	461a      	mov	r2, r3
 800028e:	2100      	movs	r1, #0
 8000290:	48a4      	ldr	r0, [pc, #656]	; (8000524 <checkNetwork+0x2a4>)
 8000292:	f003 fe83 	bl	8003f9c <memset>
	memset(Reply, 0, strlen((char*)Reply));
 8000296:	48a4      	ldr	r0, [pc, #656]	; (8000528 <checkNetwork+0x2a8>)
 8000298:	f7ff ff9a 	bl	80001d0 <strlen>
 800029c:	4603      	mov	r3, r0
 800029e:	461a      	mov	r2, r3
 80002a0:	2100      	movs	r1, #0
 80002a2:	48a1      	ldr	r0, [pc, #644]	; (8000528 <checkNetwork+0x2a8>)
 80002a4:	f003 fe7a 	bl	8003f9c <memset>
	sprintf(AtCommand, "AT\r\n");
 80002a8:	49a0      	ldr	r1, [pc, #640]	; (800052c <checkNetwork+0x2ac>)
 80002aa:	489e      	ldr	r0, [pc, #632]	; (8000524 <checkNetwork+0x2a4>)
 80002ac:	f003 fe56 	bl	8003f5c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 80002b0:	489c      	ldr	r0, [pc, #624]	; (8000524 <checkNetwork+0x2a4>)
 80002b2:	f7ff ff8d 	bl	80001d0 <strlen>
 80002b6:	4603      	mov	r3, r0
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002be:	4999      	ldr	r1, [pc, #612]	; (8000524 <checkNetwork+0x2a4>)
 80002c0:	489b      	ldr	r0, [pc, #620]	; (8000530 <checkNetwork+0x2b0>)
 80002c2:	f002 fdcb 	bl	8002e5c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Reply, 80, 1000);
 80002c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ca:	2250      	movs	r2, #80	; 0x50
 80002cc:	4996      	ldr	r1, [pc, #600]	; (8000528 <checkNetwork+0x2a8>)
 80002ce:	4898      	ldr	r0, [pc, #608]	; (8000530 <checkNetwork+0x2b0>)
 80002d0:	f002 fe4e 	bl	8002f70 <HAL_UART_Receive>
	if(strstr((char *)Reply,"OK"))
 80002d4:	4997      	ldr	r1, [pc, #604]	; (8000534 <checkNetwork+0x2b4>)
 80002d6:	4894      	ldr	r0, [pc, #592]	; (8000528 <checkNetwork+0x2a8>)
 80002d8:	f003 fe68 	bl	8003fac <strstr>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d03a      	beq.n	8000358 <checkNetwork+0xd8>
	  {
		//ATisOK = 1;
		//HAL_UART_Transmit(&huart3,(uint8_t *)rx_buffer,strlen((char *)rx_buffer),1000);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80002e2:	2201      	movs	r2, #1
 80002e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ec:	f001 f942 	bl	8001574 <HAL_GPIO_WritePin>
		HAL_Delay(3000);
 80002f0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80002f4:	f000 fcec 	bl	8000cd0 <HAL_Delay>
		{
			return 0;
		}

	// SIMCARD PIN
	memset(AtCommand, 0, strlen(AtCommand));
 80002f8:	488a      	ldr	r0, [pc, #552]	; (8000524 <checkNetwork+0x2a4>)
 80002fa:	f7ff ff69 	bl	80001d0 <strlen>
 80002fe:	4603      	mov	r3, r0
 8000300:	461a      	mov	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	4887      	ldr	r0, [pc, #540]	; (8000524 <checkNetwork+0x2a4>)
 8000306:	f003 fe49 	bl	8003f9c <memset>
	memset(Reply, 0, strlen((char*)Reply));
 800030a:	4887      	ldr	r0, [pc, #540]	; (8000528 <checkNetwork+0x2a8>)
 800030c:	f7ff ff60 	bl	80001d0 <strlen>
 8000310:	4603      	mov	r3, r0
 8000312:	461a      	mov	r2, r3
 8000314:	2100      	movs	r1, #0
 8000316:	4884      	ldr	r0, [pc, #528]	; (8000528 <checkNetwork+0x2a8>)
 8000318:	f003 fe40 	bl	8003f9c <memset>
	sprintf(AtCommand, "AT+CPIN=?\r\n");
 800031c:	4986      	ldr	r1, [pc, #536]	; (8000538 <checkNetwork+0x2b8>)
 800031e:	4881      	ldr	r0, [pc, #516]	; (8000524 <checkNetwork+0x2a4>)
 8000320:	f003 fe1c 	bl	8003f5c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 8000324:	487f      	ldr	r0, [pc, #508]	; (8000524 <checkNetwork+0x2a4>)
 8000326:	f7ff ff53 	bl	80001d0 <strlen>
 800032a:	4603      	mov	r3, r0
 800032c:	b29a      	uxth	r2, r3
 800032e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000332:	497c      	ldr	r1, [pc, #496]	; (8000524 <checkNetwork+0x2a4>)
 8000334:	487e      	ldr	r0, [pc, #504]	; (8000530 <checkNetwork+0x2b0>)
 8000336:	f002 fd91 	bl	8002e5c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Reply, 80, 1000);
 800033a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033e:	2250      	movs	r2, #80	; 0x50
 8000340:	4979      	ldr	r1, [pc, #484]	; (8000528 <checkNetwork+0x2a8>)
 8000342:	487b      	ldr	r0, [pc, #492]	; (8000530 <checkNetwork+0x2b0>)
 8000344:	f002 fe14 	bl	8002f70 <HAL_UART_Receive>
	if(strstr((char *)Reply,"OK"))
 8000348:	497a      	ldr	r1, [pc, #488]	; (8000534 <checkNetwork+0x2b4>)
 800034a:	4877      	ldr	r0, [pc, #476]	; (8000528 <checkNetwork+0x2a8>)
 800034c:	f003 fe2e 	bl	8003fac <strstr>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d007      	beq.n	8000366 <checkNetwork+0xe6>
 8000356:	e001      	b.n	800035c <checkNetwork+0xdc>
			return 0;
 8000358:	2300      	movs	r3, #0
 800035a:	e0e1      	b.n	8000520 <checkNetwork+0x2a0>
		  {
			//ATisOK = 1;
			//HAL_UART_Transmit(&huart3,(uint8_t *)rx_buffer,strlen((char *)rx_buffer),1000);
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
			HAL_Delay(1000);
 800035c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000360:	f000 fcb6 	bl	8000cd0 <HAL_Delay>
 8000364:	e013      	b.n	800038e <checkNetwork+0x10e>


		  }
		else if(strstr((char *)Reply,"ERROR"))
 8000366:	4975      	ldr	r1, [pc, #468]	; (800053c <checkNetwork+0x2bc>)
 8000368:	486f      	ldr	r0, [pc, #444]	; (8000528 <checkNetwork+0x2a8>)
 800036a:	f003 fe1f 	bl	8003fac <strstr>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d00c      	beq.n	800038e <checkNetwork+0x10e>
			{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800037a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037e:	f001 f8f9 	bl	8001574 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000386:	f000 fca3 	bl	8000cd0 <HAL_Delay>
				return 0;
 800038a:	2300      	movs	r3, #0
 800038c:	e0c8      	b.n	8000520 <checkNetwork+0x2a0>
			}

	//SIM CARD PIN
	memset(AtCommand, 0, strlen(AtCommand));
 800038e:	4865      	ldr	r0, [pc, #404]	; (8000524 <checkNetwork+0x2a4>)
 8000390:	f7ff ff1e 	bl	80001d0 <strlen>
 8000394:	4603      	mov	r3, r0
 8000396:	461a      	mov	r2, r3
 8000398:	2100      	movs	r1, #0
 800039a:	4862      	ldr	r0, [pc, #392]	; (8000524 <checkNetwork+0x2a4>)
 800039c:	f003 fdfe 	bl	8003f9c <memset>
	memset(Reply, 0, strlen((char*)Reply));
 80003a0:	4861      	ldr	r0, [pc, #388]	; (8000528 <checkNetwork+0x2a8>)
 80003a2:	f7ff ff15 	bl	80001d0 <strlen>
 80003a6:	4603      	mov	r3, r0
 80003a8:	461a      	mov	r2, r3
 80003aa:	2100      	movs	r1, #0
 80003ac:	485e      	ldr	r0, [pc, #376]	; (8000528 <checkNetwork+0x2a8>)
 80003ae:	f003 fdf5 	bl	8003f9c <memset>
	sprintf(AtCommand, "AT+CPIN?\r\n");
 80003b2:	4963      	ldr	r1, [pc, #396]	; (8000540 <checkNetwork+0x2c0>)
 80003b4:	485b      	ldr	r0, [pc, #364]	; (8000524 <checkNetwork+0x2a4>)
 80003b6:	f003 fdd1 	bl	8003f5c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 80003ba:	485a      	ldr	r0, [pc, #360]	; (8000524 <checkNetwork+0x2a4>)
 80003bc:	f7ff ff08 	bl	80001d0 <strlen>
 80003c0:	4603      	mov	r3, r0
 80003c2:	b29a      	uxth	r2, r3
 80003c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003c8:	4956      	ldr	r1, [pc, #344]	; (8000524 <checkNetwork+0x2a4>)
 80003ca:	4859      	ldr	r0, [pc, #356]	; (8000530 <checkNetwork+0x2b0>)
 80003cc:	f002 fd46 	bl	8002e5c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Reply, 80, 1000);
 80003d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003d4:	2250      	movs	r2, #80	; 0x50
 80003d6:	4954      	ldr	r1, [pc, #336]	; (8000528 <checkNetwork+0x2a8>)
 80003d8:	4855      	ldr	r0, [pc, #340]	; (8000530 <checkNetwork+0x2b0>)
 80003da:	f002 fdc9 	bl	8002f70 <HAL_UART_Receive>

	memset(AtCommand, 0, strlen(AtCommand));
 80003de:	4851      	ldr	r0, [pc, #324]	; (8000524 <checkNetwork+0x2a4>)
 80003e0:	f7ff fef6 	bl	80001d0 <strlen>
 80003e4:	4603      	mov	r3, r0
 80003e6:	461a      	mov	r2, r3
 80003e8:	2100      	movs	r1, #0
 80003ea:	484e      	ldr	r0, [pc, #312]	; (8000524 <checkNetwork+0x2a4>)
 80003ec:	f003 fdd6 	bl	8003f9c <memset>
	memset(Reply, 0, strlen((char*)Reply));
 80003f0:	484d      	ldr	r0, [pc, #308]	; (8000528 <checkNetwork+0x2a8>)
 80003f2:	f7ff feed 	bl	80001d0 <strlen>
 80003f6:	4603      	mov	r3, r0
 80003f8:	461a      	mov	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	484a      	ldr	r0, [pc, #296]	; (8000528 <checkNetwork+0x2a8>)
 80003fe:	f003 fdcd 	bl	8003f9c <memset>
	sprintf(AtCommand, "AT+CIMI=?\r\n");
 8000402:	4950      	ldr	r1, [pc, #320]	; (8000544 <checkNetwork+0x2c4>)
 8000404:	4847      	ldr	r0, [pc, #284]	; (8000524 <checkNetwork+0x2a4>)
 8000406:	f003 fda9 	bl	8003f5c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 800040a:	4846      	ldr	r0, [pc, #280]	; (8000524 <checkNetwork+0x2a4>)
 800040c:	f7ff fee0 	bl	80001d0 <strlen>
 8000410:	4603      	mov	r3, r0
 8000412:	b29a      	uxth	r2, r3
 8000414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000418:	4942      	ldr	r1, [pc, #264]	; (8000524 <checkNetwork+0x2a4>)
 800041a:	4845      	ldr	r0, [pc, #276]	; (8000530 <checkNetwork+0x2b0>)
 800041c:	f002 fd1e 	bl	8002e5c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Reply, 80, 1000);
 8000420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000424:	2250      	movs	r2, #80	; 0x50
 8000426:	4940      	ldr	r1, [pc, #256]	; (8000528 <checkNetwork+0x2a8>)
 8000428:	4841      	ldr	r0, [pc, #260]	; (8000530 <checkNetwork+0x2b0>)
 800042a:	f002 fda1 	bl	8002f70 <HAL_UART_Receive>

	//International mobile subscriber
	memset(AtCommand, 0, strlen(AtCommand));
 800042e:	483d      	ldr	r0, [pc, #244]	; (8000524 <checkNetwork+0x2a4>)
 8000430:	f7ff fece 	bl	80001d0 <strlen>
 8000434:	4603      	mov	r3, r0
 8000436:	461a      	mov	r2, r3
 8000438:	2100      	movs	r1, #0
 800043a:	483a      	ldr	r0, [pc, #232]	; (8000524 <checkNetwork+0x2a4>)
 800043c:	f003 fdae 	bl	8003f9c <memset>
	memset(Reply, 0, strlen((char*)Reply));
 8000440:	4839      	ldr	r0, [pc, #228]	; (8000528 <checkNetwork+0x2a8>)
 8000442:	f7ff fec5 	bl	80001d0 <strlen>
 8000446:	4603      	mov	r3, r0
 8000448:	461a      	mov	r2, r3
 800044a:	2100      	movs	r1, #0
 800044c:	4836      	ldr	r0, [pc, #216]	; (8000528 <checkNetwork+0x2a8>)
 800044e:	f003 fda5 	bl	8003f9c <memset>
	sprintf(AtCommand, "AT+CIMI\r\n");
 8000452:	493d      	ldr	r1, [pc, #244]	; (8000548 <checkNetwork+0x2c8>)
 8000454:	4833      	ldr	r0, [pc, #204]	; (8000524 <checkNetwork+0x2a4>)
 8000456:	f003 fd81 	bl	8003f5c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 800045a:	4832      	ldr	r0, [pc, #200]	; (8000524 <checkNetwork+0x2a4>)
 800045c:	f7ff feb8 	bl	80001d0 <strlen>
 8000460:	4603      	mov	r3, r0
 8000462:	b29a      	uxth	r2, r3
 8000464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000468:	492e      	ldr	r1, [pc, #184]	; (8000524 <checkNetwork+0x2a4>)
 800046a:	4831      	ldr	r0, [pc, #196]	; (8000530 <checkNetwork+0x2b0>)
 800046c:	f002 fcf6 	bl	8002e5c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Reply, 80, 1000);
 8000470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000474:	2250      	movs	r2, #80	; 0x50
 8000476:	492c      	ldr	r1, [pc, #176]	; (8000528 <checkNetwork+0x2a8>)
 8000478:	482d      	ldr	r0, [pc, #180]	; (8000530 <checkNetwork+0x2b0>)
 800047a:	f002 fd79 	bl	8002f70 <HAL_UART_Receive>

	// Network registration
	memset(AtCommand, 0, strlen(AtCommand));
 800047e:	4829      	ldr	r0, [pc, #164]	; (8000524 <checkNetwork+0x2a4>)
 8000480:	f7ff fea6 	bl	80001d0 <strlen>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	2100      	movs	r1, #0
 800048a:	4826      	ldr	r0, [pc, #152]	; (8000524 <checkNetwork+0x2a4>)
 800048c:	f003 fd86 	bl	8003f9c <memset>
	memset(Reply, 0, strlen((char*)Reply));
 8000490:	4825      	ldr	r0, [pc, #148]	; (8000528 <checkNetwork+0x2a8>)
 8000492:	f7ff fe9d 	bl	80001d0 <strlen>
 8000496:	4603      	mov	r3, r0
 8000498:	461a      	mov	r2, r3
 800049a:	2100      	movs	r1, #0
 800049c:	4822      	ldr	r0, [pc, #136]	; (8000528 <checkNetwork+0x2a8>)
 800049e:	f003 fd7d 	bl	8003f9c <memset>
	sprintf(AtCommand, "AT+CREG?\r\n");
 80004a2:	492a      	ldr	r1, [pc, #168]	; (800054c <checkNetwork+0x2cc>)
 80004a4:	481f      	ldr	r0, [pc, #124]	; (8000524 <checkNetwork+0x2a4>)
 80004a6:	f003 fd59 	bl	8003f5c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 80004aa:	481e      	ldr	r0, [pc, #120]	; (8000524 <checkNetwork+0x2a4>)
 80004ac:	f7ff fe90 	bl	80001d0 <strlen>
 80004b0:	4603      	mov	r3, r0
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004b8:	491a      	ldr	r1, [pc, #104]	; (8000524 <checkNetwork+0x2a4>)
 80004ba:	481d      	ldr	r0, [pc, #116]	; (8000530 <checkNetwork+0x2b0>)
 80004bc:	f002 fcce 	bl	8002e5c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Reply, 80, 1000);
 80004c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004c4:	2250      	movs	r2, #80	; 0x50
 80004c6:	4918      	ldr	r1, [pc, #96]	; (8000528 <checkNetwork+0x2a8>)
 80004c8:	4819      	ldr	r0, [pc, #100]	; (8000530 <checkNetwork+0x2b0>)
 80004ca:	f002 fd51 	bl	8002f70 <HAL_UART_Receive>

	// signal quality
	memset(AtCommand, 0, strlen(AtCommand));
 80004ce:	4815      	ldr	r0, [pc, #84]	; (8000524 <checkNetwork+0x2a4>)
 80004d0:	f7ff fe7e 	bl	80001d0 <strlen>
 80004d4:	4603      	mov	r3, r0
 80004d6:	461a      	mov	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	4812      	ldr	r0, [pc, #72]	; (8000524 <checkNetwork+0x2a4>)
 80004dc:	f003 fd5e 	bl	8003f9c <memset>
	memset(Reply, 0, strlen((char*)Reply));
 80004e0:	4811      	ldr	r0, [pc, #68]	; (8000528 <checkNetwork+0x2a8>)
 80004e2:	f7ff fe75 	bl	80001d0 <strlen>
 80004e6:	4603      	mov	r3, r0
 80004e8:	461a      	mov	r2, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	480e      	ldr	r0, [pc, #56]	; (8000528 <checkNetwork+0x2a8>)
 80004ee:	f003 fd55 	bl	8003f9c <memset>
	sprintf(AtCommand, "AT+CSQ\r\n");
 80004f2:	4917      	ldr	r1, [pc, #92]	; (8000550 <checkNetwork+0x2d0>)
 80004f4:	480b      	ldr	r0, [pc, #44]	; (8000524 <checkNetwork+0x2a4>)
 80004f6:	f003 fd31 	bl	8003f5c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 80004fa:	480a      	ldr	r0, [pc, #40]	; (8000524 <checkNetwork+0x2a4>)
 80004fc:	f7ff fe68 	bl	80001d0 <strlen>
 8000500:	4603      	mov	r3, r0
 8000502:	b29a      	uxth	r2, r3
 8000504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000508:	4906      	ldr	r1, [pc, #24]	; (8000524 <checkNetwork+0x2a4>)
 800050a:	4809      	ldr	r0, [pc, #36]	; (8000530 <checkNetwork+0x2b0>)
 800050c:	f002 fca6 	bl	8002e5c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Reply, 80, 1000);
 8000510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000514:	2250      	movs	r2, #80	; 0x50
 8000516:	4904      	ldr	r1, [pc, #16]	; (8000528 <checkNetwork+0x2a8>)
 8000518:	4805      	ldr	r0, [pc, #20]	; (8000530 <checkNetwork+0x2b0>)
 800051a:	f002 fd29 	bl	8002f70 <HAL_UART_Receive>
	return 1;
 800051e:	2301      	movs	r3, #1
}
 8000520:	4618      	mov	r0, r3
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000188 	.word	0x20000188
 8000528:	200001d8 	.word	0x200001d8
 800052c:	080048e8 	.word	0x080048e8
 8000530:	20000078 	.word	0x20000078
 8000534:	080048f0 	.word	0x080048f0
 8000538:	080048f4 	.word	0x080048f4
 800053c:	08004900 	.word	0x08004900
 8000540:	08004908 	.word	0x08004908
 8000544:	08004914 	.word	0x08004914
 8000548:	08004920 	.word	0x08004920
 800054c:	0800492c 	.word	0x0800492c
 8000550:	08004938 	.word	0x08004938

08000554 <sendSMS>:

int sendSMS()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	 memset(AtCommand, 0, sizeof(AtCommand));
 8000558:	2250      	movs	r2, #80	; 0x50
 800055a:	2100      	movs	r1, #0
 800055c:	483d      	ldr	r0, [pc, #244]	; (8000654 <sendSMS+0x100>)
 800055e:	f003 fd1d 	bl	8003f9c <memset>
	memset(Reply, 0, sizeof(Reply));
 8000562:	2250      	movs	r2, #80	; 0x50
 8000564:	2100      	movs	r1, #0
 8000566:	483c      	ldr	r0, [pc, #240]	; (8000658 <sendSMS+0x104>)
 8000568:	f003 fd18 	bl	8003f9c <memset>

	// Set SMS text mode
	sprintf(AtCommand, "AT+CMGF=1\r\n");
 800056c:	493b      	ldr	r1, [pc, #236]	; (800065c <sendSMS+0x108>)
 800056e:	4839      	ldr	r0, [pc, #228]	; (8000654 <sendSMS+0x100>)
 8000570:	f003 fcf4 	bl	8003f5c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 8000574:	4837      	ldr	r0, [pc, #220]	; (8000654 <sendSMS+0x100>)
 8000576:	f7ff fe2b 	bl	80001d0 <strlen>
 800057a:	4603      	mov	r3, r0
 800057c:	b29a      	uxth	r2, r3
 800057e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000582:	4934      	ldr	r1, [pc, #208]	; (8000654 <sendSMS+0x100>)
 8000584:	4836      	ldr	r0, [pc, #216]	; (8000660 <sendSMS+0x10c>)
 8000586:	f002 fc69 	bl	8002e5c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Reply, sizeof(Reply), 1000);
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	2250      	movs	r2, #80	; 0x50
 8000590:	4931      	ldr	r1, [pc, #196]	; (8000658 <sendSMS+0x104>)
 8000592:	4833      	ldr	r0, [pc, #204]	; (8000660 <sendSMS+0x10c>)
 8000594:	f002 fcec 	bl	8002f70 <HAL_UART_Receive>

	if (strstr((char *)Reply, "OK") == NULL) {
 8000598:	4932      	ldr	r1, [pc, #200]	; (8000664 <sendSMS+0x110>)
 800059a:	482f      	ldr	r0, [pc, #188]	; (8000658 <sendSMS+0x104>)
 800059c:	f003 fd06 	bl	8003fac <strstr>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d101      	bne.n	80005aa <sendSMS+0x56>
		return 0; // Error setting text mode
 80005a6:	2300      	movs	r3, #0
 80005a8:	e051      	b.n	800064e <sendSMS+0xfa>
	}

	// Set recipient phone number
	memset(AtCommand, 0, sizeof(AtCommand));
 80005aa:	2250      	movs	r2, #80	; 0x50
 80005ac:	2100      	movs	r1, #0
 80005ae:	4829      	ldr	r0, [pc, #164]	; (8000654 <sendSMS+0x100>)
 80005b0:	f003 fcf4 	bl	8003f9c <memset>
	sprintf(AtCommand, "AT+CMGS=\"+254750558407\"\r\n");
 80005b4:	492c      	ldr	r1, [pc, #176]	; (8000668 <sendSMS+0x114>)
 80005b6:	4827      	ldr	r0, [pc, #156]	; (8000654 <sendSMS+0x100>)
 80005b8:	f003 fcd0 	bl	8003f5c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 80005bc:	4825      	ldr	r0, [pc, #148]	; (8000654 <sendSMS+0x100>)
 80005be:	f7ff fe07 	bl	80001d0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	4922      	ldr	r1, [pc, #136]	; (8000654 <sendSMS+0x100>)
 80005cc:	4824      	ldr	r0, [pc, #144]	; (8000660 <sendSMS+0x10c>)
 80005ce:	f002 fc45 	bl	8002e5c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Reply, sizeof(Reply), 1000);
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	2250      	movs	r2, #80	; 0x50
 80005d8:	491f      	ldr	r1, [pc, #124]	; (8000658 <sendSMS+0x104>)
 80005da:	4821      	ldr	r0, [pc, #132]	; (8000660 <sendSMS+0x10c>)
 80005dc:	f002 fcc8 	bl	8002f70 <HAL_UART_Receive>

	if (strstr((char *)Reply, "> ") == NULL) { // Check for prompt
 80005e0:	4922      	ldr	r1, [pc, #136]	; (800066c <sendSMS+0x118>)
 80005e2:	481d      	ldr	r0, [pc, #116]	; (8000658 <sendSMS+0x104>)
 80005e4:	f003 fce2 	bl	8003fac <strstr>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d101      	bne.n	80005f2 <sendSMS+0x9e>
		return 0; // Error setting phone number
 80005ee:	2300      	movs	r3, #0
 80005f0:	e02d      	b.n	800064e <sendSMS+0xfa>
	}

	// Send SMS message
	memset(AtCommand, 0, sizeof(AtCommand));
 80005f2:	2250      	movs	r2, #80	; 0x50
 80005f4:	2100      	movs	r1, #0
 80005f6:	4817      	ldr	r0, [pc, #92]	; (8000654 <sendSMS+0x100>)
 80005f8:	f003 fcd0 	bl	8003f9c <memset>
	sprintf(AtCommand, "Hello\r\n");
 80005fc:	491c      	ldr	r1, [pc, #112]	; (8000670 <sendSMS+0x11c>)
 80005fe:	4815      	ldr	r0, [pc, #84]	; (8000654 <sendSMS+0x100>)
 8000600:	f003 fcac 	bl	8003f5c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)AtCommand, strlen(AtCommand), 1000);
 8000604:	4813      	ldr	r0, [pc, #76]	; (8000654 <sendSMS+0x100>)
 8000606:	f7ff fde3 	bl	80001d0 <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	b29a      	uxth	r2, r3
 800060e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000612:	4910      	ldr	r1, [pc, #64]	; (8000654 <sendSMS+0x100>)
 8000614:	4812      	ldr	r0, [pc, #72]	; (8000660 <sendSMS+0x10c>)
 8000616:	f002 fc21 	bl	8002e5c <HAL_UART_Transmit>
	AtCommand[0] = 26; // Ctrl+Z
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <sendSMS+0x100>)
 800061c:	221a      	movs	r2, #26
 800061e:	701a      	strb	r2, [r3, #0]
	AtCommand[1] = '\0';
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <sendSMS+0x100>)
 8000622:	2200      	movs	r2, #0
 8000624:	705a      	strb	r2, [r3, #1]
	HAL_UART_Transmit(&huart2, (uint8_t *)"\x1A", 1, 1000);
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	2201      	movs	r2, #1
 800062c:	4911      	ldr	r1, [pc, #68]	; (8000674 <sendSMS+0x120>)
 800062e:	480c      	ldr	r0, [pc, #48]	; (8000660 <sendSMS+0x10c>)
 8000630:	f002 fc14 	bl	8002e5c <HAL_UART_Transmit>
	 memset(Reply, 0, sizeof(Reply));
 8000634:	2250      	movs	r2, #80	; 0x50
 8000636:	2100      	movs	r1, #0
 8000638:	4807      	ldr	r0, [pc, #28]	; (8000658 <sendSMS+0x104>)
 800063a:	f003 fcaf 	bl	8003f9c <memset>
	HAL_UART_Receive(&huart2, Reply, sizeof(Reply), 1000);
 800063e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000642:	2250      	movs	r2, #80	; 0x50
 8000644:	4904      	ldr	r1, [pc, #16]	; (8000658 <sendSMS+0x104>)
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <sendSMS+0x10c>)
 8000648:	f002 fc92 	bl	8002f70 <HAL_UART_Receive>

	return 1;
 800064c:	2301      	movs	r3, #1
}
 800064e:	4618      	mov	r0, r3
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000188 	.word	0x20000188
 8000658:	200001d8 	.word	0x200001d8
 800065c:	08004944 	.word	0x08004944
 8000660:	20000078 	.word	0x20000078
 8000664:	080048f0 	.word	0x080048f0
 8000668:	08004950 	.word	0x08004950
 800066c:	0800496c 	.word	0x0800496c
 8000670:	08004970 	.word	0x08004970
 8000674:	08004978 	.word	0x08004978

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 fac2 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f834 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f000 f8d8 	bl	8000838 <MX_GPIO_Init>
  MX_DMA_Init();
 8000688:	f000 f8b0 	bl	80007ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 800068c:	f000 f87e 	bl	800078c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000696:	4814      	ldr	r0, [pc, #80]	; (80006e8 <main+0x70>)
 8000698:	f000 ff6c 	bl	8001574 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 800069c:	f241 3088 	movw	r0, #5000	; 0x1388
 80006a0:	f000 fb16 	bl	8000cd0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006aa:	480f      	ldr	r0, [pc, #60]	; (80006e8 <main+0x70>)
 80006ac:	f000 ff62 	bl	8001574 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 80006b0:	f241 3088 	movw	r0, #5000	; 0x1388
 80006b4:	f000 fb0c 	bl	8000cd0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006be:	480a      	ldr	r0, [pc, #40]	; (80006e8 <main+0x70>)
 80006c0:	f000 ff58 	bl	8001574 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (!checkNetwork())
 80006c4:	e005      	b.n	80006d2 <main+0x5a>
  {
	  checkNetwork();
 80006c6:	f7ff fddb 	bl	8000280 <checkNetwork>
	  HAL_Delay(1000);
 80006ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ce:	f000 faff 	bl	8000cd0 <HAL_Delay>
  while (!checkNetwork())
 80006d2:	f7ff fdd5 	bl	8000280 <checkNetwork>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d0f4      	beq.n	80006c6 <main+0x4e>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  sendSMS();
 80006dc:	f7ff ff3a 	bl	8000554 <sendSMS>
 80006e0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	48000400 	.word	0x48000400

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b09e      	sub	sp, #120	; 0x78
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006f6:	2228      	movs	r2, #40	; 0x28
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fc4e 	bl	8003f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	223c      	movs	r2, #60	; 0x3c
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fc40 	bl	8003f9c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000728:	2300      	movs	r3, #0
 800072a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000730:	4618      	mov	r0, r3
 8000732:	f000 ff37 	bl	80015a4 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800073c:	f000 f8e0 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000754:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f001 ff60 	bl	8002620 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000766:	f000 f8cb 	bl	8000900 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800076a:	2302      	movs	r3, #2
 800076c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4618      	mov	r0, r3
 8000776:	f002 f973 	bl	8002a60 <HAL_RCCEx_PeriphCLKConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000780:	f000 f8be 	bl	8000900 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3778      	adds	r7, #120	; 0x78
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <MX_USART2_UART_Init+0x5c>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART2_UART_Init+0x58>)
 80007d0:	f002 faf6 	bl	8002dc0 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 f891 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000078 	.word	0x20000078
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_DMA_Init+0x48>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <MX_DMA_Init+0x48>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6153      	str	r3, [r2, #20]
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <MX_DMA_Init+0x48>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	2010      	movs	r0, #16
 8000810:	f000 fb5d 	bl	8000ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000814:	2010      	movs	r0, #16
 8000816:	f000 fb76 	bl	8000f06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	2011      	movs	r0, #17
 8000820:	f000 fb55 	bl	8000ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000824:	2011      	movs	r0, #17
 8000826:	f000 fb6e 	bl	8000f06 <HAL_NVIC_EnableIRQ>

}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084e:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	4a29      	ldr	r2, [pc, #164]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000854:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000858:	6153      	str	r3, [r2, #20]
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <MX_GPIO_Init+0xc0>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a23      	ldr	r2, [pc, #140]	; (80008f8 <MX_GPIO_Init+0xc0>)
 800086c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000870:	6153      	str	r3, [r2, #20]
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <MX_GPIO_Init+0xc0>)
 8000884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000888:	6153      	str	r3, [r2, #20]
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_GPIO_Init+0xc0>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800089c:	4817      	ldr	r0, [pc, #92]	; (80008fc <MX_GPIO_Init+0xc4>)
 800089e:	f000 fe69 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ac:	f000 fe62 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4619      	mov	r1, r3
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <MX_GPIO_Init+0xc4>)
 80008ca:	f000 fcd9 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	4619      	mov	r1, r3
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ea:	f000 fcc9 	bl	8001280 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000400 	.word	0x48000400

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <HAL_MspInit+0x44>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <HAL_MspInit+0x44>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6193      	str	r3, [r2, #24]
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <HAL_MspInit+0x44>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <HAL_MspInit+0x44>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <HAL_MspInit+0x44>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	61d3      	str	r3, [r2, #28]
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_MspInit+0x44>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a41      	ldr	r2, [pc, #260]	; (8000a78 <HAL_UART_MspInit+0x124>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d17c      	bne.n	8000a70 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000976:	4b41      	ldr	r3, [pc, #260]	; (8000a7c <HAL_UART_MspInit+0x128>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	4a40      	ldr	r2, [pc, #256]	; (8000a7c <HAL_UART_MspInit+0x128>)
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	61d3      	str	r3, [r2, #28]
 8000982:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <HAL_UART_MspInit+0x128>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b3b      	ldr	r3, [pc, #236]	; (8000a7c <HAL_UART_MspInit+0x128>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	4a3a      	ldr	r2, [pc, #232]	; (8000a7c <HAL_UART_MspInit+0x128>)
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	6153      	str	r3, [r2, #20]
 800099a:	4b38      	ldr	r3, [pc, #224]	; (8000a7c <HAL_UART_MspInit+0x128>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009a6:	230c      	movs	r3, #12
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b6:	2307      	movs	r3, #7
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c4:	f000 fc5c 	bl	8001280 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80009c8:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <HAL_UART_MspInit+0x12c>)
 80009ca:	4a2e      	ldr	r2, [pc, #184]	; (8000a84 <HAL_UART_MspInit+0x130>)
 80009cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ce:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <HAL_UART_MspInit+0x12c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d4:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <HAL_UART_MspInit+0x12c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009da:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <HAL_UART_MspInit+0x12c>)
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <HAL_UART_MspInit+0x12c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009e6:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <HAL_UART_MspInit+0x12c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80009ec:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <HAL_UART_MspInit+0x12c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009f2:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <HAL_UART_MspInit+0x12c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80009f8:	4821      	ldr	r0, [pc, #132]	; (8000a80 <HAL_UART_MspInit+0x12c>)
 80009fa:	f000 fa9e 	bl	8000f3a <HAL_DMA_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000a04:	f7ff ff7c 	bl	8000900 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a1d      	ldr	r2, [pc, #116]	; (8000a80 <HAL_UART_MspInit+0x12c>)
 8000a0c:	675a      	str	r2, [r3, #116]	; 0x74
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <HAL_UART_MspInit+0x12c>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <HAL_UART_MspInit+0x134>)
 8000a16:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <HAL_UART_MspInit+0x138>)
 8000a18:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <HAL_UART_MspInit+0x134>)
 8000a1c:	2210      	movs	r2, #16
 8000a1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a20:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <HAL_UART_MspInit+0x134>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <HAL_UART_MspInit+0x134>)
 8000a28:	2280      	movs	r2, #128	; 0x80
 8000a2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <HAL_UART_MspInit+0x134>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_UART_MspInit+0x134>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <HAL_UART_MspInit+0x134>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_UART_MspInit+0x134>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a44:	4810      	ldr	r0, [pc, #64]	; (8000a88 <HAL_UART_MspInit+0x134>)
 8000a46:	f000 fa78 	bl	8000f3a <HAL_DMA_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8000a50:	f7ff ff56 	bl	8000900 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a0c      	ldr	r2, [pc, #48]	; (8000a88 <HAL_UART_MspInit+0x134>)
 8000a58:	671a      	str	r2, [r3, #112]	; 0x70
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <HAL_UART_MspInit+0x134>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2026      	movs	r0, #38	; 0x26
 8000a66:	f000 fa32 	bl	8000ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a6a:	2026      	movs	r0, #38	; 0x26
 8000a6c:	f000 fa4b 	bl	8000f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40004400 	.word	0x40004400
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	20000100 	.word	0x20000100
 8000a84:	4002006c 	.word	0x4002006c
 8000a88:	20000144 	.word	0x20000144
 8000a8c:	40020080 	.word	0x40020080

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 f8d8 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <DMA1_Channel6_IRQHandler+0x10>)
 8000aea:	f000 fae9 	bl	80010c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000100 	.word	0x20000100

08000af8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <DMA1_Channel7_IRQHandler+0x10>)
 8000afe:	f000 fadf 	bl	80010c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000144 	.word	0x20000144

08000b0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <USART2_IRQHandler+0x10>)
 8000b12:	f002 fae3 	bl	80030dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000078 	.word	0x20000078

08000b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <_sbrk+0x5c>)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <_sbrk+0x60>)
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <_sbrk+0x64>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <_sbrk+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d207      	bcs.n	8000b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b50:	f003 fa42 	bl	8003fd8 <__errno>
 8000b54:	4603      	mov	r3, r0
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	2000a000 	.word	0x2000a000
 8000b80:	00000400 	.word	0x00000400
 8000b84:	20000228 	.word	0x20000228
 8000b88:	20000378 	.word	0x20000378

08000b8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb4:	f7ff ffea 	bl	8000b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	; (8000bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	; (8000bfc <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f003 fa01 	bl	8003fe4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be2:	f7ff fd49 	bl	8000678 <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000be8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bf4:	080049f0 	.word	0x080049f0
  ldr r2, =_sbss
 8000bf8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bfc:	20000378 	.word	0x20000378

08000c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_2_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x28>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_Init+0x28>)
 8000c0e:	f043 0310 	orr.w	r3, r3, #16
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f94f 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f000 f808 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fe74 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40022000 	.word	0x40022000

08000c30 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x54>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x58>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f967 	bl	8000f22 <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00e      	b.n	8000c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d80a      	bhi.n	8000c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f000 f92f 	bl	8000ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <HAL_InitTick+0x5c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	2000022c 	.word	0x2000022c

08000cb8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	2000022c 	.word	0x2000022c

08000cd0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff ffee 	bl	8000cb8 <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_Delay+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ffde 	bl	8000cb8 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4907      	ldr	r1, [pc, #28]	; (8000db4 <__NVIC_EnableIRQ+0x38>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	; (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e84:	d301      	bcc.n	8000e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00f      	b.n	8000eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <SysTick_Config+0x40>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e92:	210f      	movs	r1, #15
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f7ff ff8e 	bl	8000db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <SysTick_Config+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <SysTick_Config+0x40>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff29 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee0:	f7ff ff3e 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	f7ff ff8e 	bl	8000e0c <NVIC_EncodePriority>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff5d 	bl	8000db8 <__NVIC_SetPriority>
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff31 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffa2 	bl	8000e74 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e037      	b.n	8000fc0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2202      	movs	r2, #2
 8000f54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f930 	bl	8001208 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e02e      	b.n	8001038 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d008      	beq.n	8000ff6 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e020      	b.n	8001038 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 020e 	bic.w	r2, r2, #14
 8001004:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0201 	bic.w	r2, r2, #1
 8001014:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101e:	2101      	movs	r1, #1
 8001020:	fa01 f202 	lsl.w	r2, r1, r2
 8001024:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001056:	2b02      	cmp	r3, #2
 8001058:	d005      	beq.n	8001066 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2204      	movs	r2, #4
 800105e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	e027      	b.n	80010b6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 020e 	bic.w	r2, r2, #14
 8001074:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0201 	bic.w	r2, r2, #1
 8001084:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108e:	2101      	movs	r1, #1
 8001090:	fa01 f202 	lsl.w	r2, r1, r2
 8001094:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	4798      	blx	r3
    }
  }
  return status;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	2204      	movs	r2, #4
 80010de:	409a      	lsls	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d024      	beq.n	8001132 <HAL_DMA_IRQHandler+0x72>
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d01f      	beq.n	8001132 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0320 	and.w	r3, r3, #32
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d107      	bne.n	8001110 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0204 	bic.w	r2, r2, #4
 800110e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001118:	2104      	movs	r1, #4
 800111a:	fa01 f202 	lsl.w	r2, r1, r2
 800111e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001124:	2b00      	cmp	r3, #0
 8001126:	d06a      	beq.n	80011fe <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001130:	e065      	b.n	80011fe <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	2202      	movs	r2, #2
 8001138:	409a      	lsls	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d02c      	beq.n	800119c <HAL_DMA_IRQHandler+0xdc>
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d027      	beq.n	800119c <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0320 	and.w	r3, r3, #32
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10b      	bne.n	8001172 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 020a 	bic.w	r2, r2, #10
 8001168:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117a:	2102      	movs	r1, #2
 800117c:	fa01 f202 	lsl.w	r2, r1, r2
 8001180:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118e:	2b00      	cmp	r3, #0
 8001190:	d035      	beq.n	80011fe <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800119a:	e030      	b.n	80011fe <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	2208      	movs	r2, #8
 80011a2:	409a      	lsls	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4013      	ands	r3, r2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d028      	beq.n	80011fe <HAL_DMA_IRQHandler+0x13e>
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d023      	beq.n	80011fe <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 020e 	bic.w	r2, r2, #14
 80011c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ce:	2101      	movs	r1, #1
 80011d0:	fa01 f202 	lsl.w	r2, r1, r2
 80011d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	4798      	blx	r3
    }
  }
}
 80011fc:	e7ff      	b.n	80011fe <HAL_DMA_IRQHandler+0x13e>
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <DMA_CalcBaseAndBitshift+0x60>)
 8001218:	429a      	cmp	r2, r3
 800121a:	d80f      	bhi.n	800123c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <DMA_CalcBaseAndBitshift+0x64>)
 8001224:	4413      	add	r3, r2
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <DMA_CalcBaseAndBitshift+0x68>)
 8001228:	fba2 2303 	umull	r2, r3, r2, r3
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	009a      	lsls	r2, r3, #2
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <DMA_CalcBaseAndBitshift+0x6c>)
 8001238:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800123a:	e00e      	b.n	800125a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <DMA_CalcBaseAndBitshift+0x70>)
 8001244:	4413      	add	r3, r2
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <DMA_CalcBaseAndBitshift+0x68>)
 8001248:	fba2 2303 	umull	r2, r3, r2, r3
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	009a      	lsls	r2, r3, #2
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a09      	ldr	r2, [pc, #36]	; (800127c <DMA_CalcBaseAndBitshift+0x74>)
 8001258:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40020407 	.word	0x40020407
 800126c:	bffdfff8 	.word	0xbffdfff8
 8001270:	cccccccd 	.word	0xcccccccd
 8001274:	40020000 	.word	0x40020000
 8001278:	bffdfbf8 	.word	0xbffdfbf8
 800127c:	40020400 	.word	0x40020400

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128e:	e154      	b.n	800153a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2101      	movs	r1, #1
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 8146 	beq.w	8001534 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d005      	beq.n	80012c0 <HAL_GPIO_Init+0x40>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d130      	bne.n	8001322 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f6:	2201      	movs	r2, #1
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	f003 0201 	and.w	r2, r3, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b03      	cmp	r3, #3
 800132c:	d017      	beq.n	800135e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d123      	bne.n	80013b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	08da      	lsrs	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3208      	adds	r2, #8
 8001372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	220f      	movs	r2, #15
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	08da      	lsrs	r2, r3, #3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3208      	adds	r2, #8
 80013ac:	6939      	ldr	r1, [r7, #16]
 80013ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0203 	and.w	r2, r3, #3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 80a0 	beq.w	8001534 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f4:	4b58      	ldr	r3, [pc, #352]	; (8001558 <HAL_GPIO_Init+0x2d8>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a57      	ldr	r2, [pc, #348]	; (8001558 <HAL_GPIO_Init+0x2d8>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b55      	ldr	r3, [pc, #340]	; (8001558 <HAL_GPIO_Init+0x2d8>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800140c:	4a53      	ldr	r2, [pc, #332]	; (800155c <HAL_GPIO_Init+0x2dc>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	220f      	movs	r2, #15
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001436:	d019      	beq.n	800146c <HAL_GPIO_Init+0x1ec>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a49      	ldr	r2, [pc, #292]	; (8001560 <HAL_GPIO_Init+0x2e0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d013      	beq.n	8001468 <HAL_GPIO_Init+0x1e8>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a48      	ldr	r2, [pc, #288]	; (8001564 <HAL_GPIO_Init+0x2e4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d00d      	beq.n	8001464 <HAL_GPIO_Init+0x1e4>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a47      	ldr	r2, [pc, #284]	; (8001568 <HAL_GPIO_Init+0x2e8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d007      	beq.n	8001460 <HAL_GPIO_Init+0x1e0>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a46      	ldr	r2, [pc, #280]	; (800156c <HAL_GPIO_Init+0x2ec>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d101      	bne.n	800145c <HAL_GPIO_Init+0x1dc>
 8001458:	2304      	movs	r3, #4
 800145a:	e008      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 800145c:	2305      	movs	r3, #5
 800145e:	e006      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 8001460:	2303      	movs	r3, #3
 8001462:	e004      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 8001464:	2302      	movs	r3, #2
 8001466:	e002      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 800146c:	2300      	movs	r3, #0
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	f002 0203 	and.w	r2, r2, #3
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	4093      	lsls	r3, r2
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800147e:	4937      	ldr	r1, [pc, #220]	; (800155c <HAL_GPIO_Init+0x2dc>)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	3302      	adds	r3, #2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148c:	4b38      	ldr	r3, [pc, #224]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014b0:	4a2f      	ldr	r2, [pc, #188]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b6:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014da:	4a25      	ldr	r2, [pc, #148]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001504:	4a1a      	ldr	r2, [pc, #104]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800152e:	4a10      	ldr	r2, [pc, #64]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	fa22 f303 	lsr.w	r3, r2, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	f47f aea3 	bne.w	8001290 <HAL_GPIO_Init+0x10>
  }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40021000 	.word	0x40021000
 800155c:	40010000 	.word	0x40010000
 8001560:	48000400 	.word	0x48000400
 8001564:	48000800 	.word	0x48000800
 8001568:	48000c00 	.word	0x48000c00
 800156c:	48001000 	.word	0x48001000
 8001570:	40010400 	.word	0x40010400

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001590:	e002      	b.n	8001598 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001592:	887a      	ldrh	r2, [r7, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015b4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f001 b823 	b.w	8002610 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 817d 	beq.w	80018da <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015e0:	4bbc      	ldr	r3, [pc, #752]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d00c      	beq.n	8001606 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015ec:	4bb9      	ldr	r3, [pc, #740]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d15c      	bne.n	80016b2 <HAL_RCC_OscConfig+0x10e>
 80015f8:	4bb6      	ldr	r3, [pc, #728]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001604:	d155      	bne.n	80016b2 <HAL_RCC_OscConfig+0x10e>
 8001606:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800160a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001612:	fa93 f3a3 	rbit	r3, r3
 8001616:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800161a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	095b      	lsrs	r3, r3, #5
 8001626:	b2db      	uxtb	r3, r3
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b01      	cmp	r3, #1
 8001630:	d102      	bne.n	8001638 <HAL_RCC_OscConfig+0x94>
 8001632:	4ba8      	ldr	r3, [pc, #672]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e015      	b.n	8001664 <HAL_RCC_OscConfig+0xc0>
 8001638:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800163c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001640:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001644:	fa93 f3a3 	rbit	r3, r3
 8001648:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800164c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001650:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001654:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001658:	fa93 f3a3 	rbit	r3, r3
 800165c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001660:	4b9c      	ldr	r3, [pc, #624]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001668:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800166c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001670:	fa92 f2a2 	rbit	r2, r2
 8001674:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001678:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800167c:	fab2 f282 	clz	r2, r2
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	f042 0220 	orr.w	r2, r2, #32
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	f002 021f 	and.w	r2, r2, #31
 800168c:	2101      	movs	r1, #1
 800168e:	fa01 f202 	lsl.w	r2, r1, r2
 8001692:	4013      	ands	r3, r2
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 811f 	beq.w	80018d8 <HAL_RCC_OscConfig+0x334>
 800169a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f040 8116 	bne.w	80018d8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	f000 bfaf 	b.w	8002610 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x12e>
 80016c4:	4b83      	ldr	r3, [pc, #524]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a82      	ldr	r2, [pc, #520]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 80016ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	e036      	b.n	8001740 <HAL_RCC_OscConfig+0x19c>
 80016d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0x158>
 80016e2:	4b7c      	ldr	r3, [pc, #496]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a7b      	ldr	r2, [pc, #492]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 80016e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b79      	ldr	r3, [pc, #484]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a78      	ldr	r2, [pc, #480]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 80016f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e021      	b.n	8001740 <HAL_RCC_OscConfig+0x19c>
 80016fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001700:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x184>
 800170e:	4b71      	ldr	r3, [pc, #452]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a70      	ldr	r2, [pc, #448]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 8001714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b6e      	ldr	r3, [pc, #440]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a6d      	ldr	r2, [pc, #436]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 8001720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0x19c>
 8001728:	4b6a      	ldr	r3, [pc, #424]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a69      	ldr	r2, [pc, #420]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 800172e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a66      	ldr	r2, [pc, #408]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 800173a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001740:	4b64      	ldr	r3, [pc, #400]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	f023 020f 	bic.w	r2, r3, #15
 8001748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	495f      	ldr	r1, [pc, #380]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 8001756:	4313      	orrs	r3, r2
 8001758:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800175a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d059      	beq.n	800181e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7ff faa5 	bl	8000cb8 <HAL_GetTick>
 800176e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	e00a      	b.n	800178a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff faa0 	bl	8000cb8 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b64      	cmp	r3, #100	; 0x64
 8001782:	d902      	bls.n	800178a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	f000 bf43 	b.w	8002610 <HAL_RCC_OscConfig+0x106c>
 800178a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800178e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800179e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a2:	fab3 f383 	clz	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	095b      	lsrs	r3, r3, #5
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d102      	bne.n	80017bc <HAL_RCC_OscConfig+0x218>
 80017b6:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	e015      	b.n	80017e8 <HAL_RCC_OscConfig+0x244>
 80017bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80017d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017d4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80017d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80017dc:	fa93 f3a3 	rbit	r3, r3
 80017e0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80017e4:	4b3b      	ldr	r3, [pc, #236]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017ec:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80017f0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80017f4:	fa92 f2a2 	rbit	r2, r2
 80017f8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80017fc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001800:	fab2 f282 	clz	r2, r2
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	f042 0220 	orr.w	r2, r2, #32
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	f002 021f 	and.w	r2, r2, #31
 8001810:	2101      	movs	r1, #1
 8001812:	fa01 f202 	lsl.w	r2, r1, r2
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0ab      	beq.n	8001774 <HAL_RCC_OscConfig+0x1d0>
 800181c:	e05d      	b.n	80018da <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff fa4b 	bl	8000cb8 <HAL_GetTick>
 8001822:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	e00a      	b.n	800183e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fa46 	bl	8000cb8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b64      	cmp	r3, #100	; 0x64
 8001836:	d902      	bls.n	800183e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	f000 bee9 	b.w	8002610 <HAL_RCC_OscConfig+0x106c>
 800183e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001842:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800184a:	fa93 f3a3 	rbit	r3, r3
 800184e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001852:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	095b      	lsrs	r3, r3, #5
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b01      	cmp	r3, #1
 8001868:	d102      	bne.n	8001870 <HAL_RCC_OscConfig+0x2cc>
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	e015      	b.n	800189c <HAL_RCC_OscConfig+0x2f8>
 8001870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001874:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800187c:	fa93 f3a3 	rbit	r3, r3
 8001880:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001888:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800188c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_RCC_OscConfig+0x330>)
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018a0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80018a4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018a8:	fa92 f2a2 	rbit	r2, r2
 80018ac:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80018b0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80018b4:	fab2 f282 	clz	r2, r2
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	f042 0220 	orr.w	r2, r2, #32
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	f002 021f 	and.w	r2, r2, #31
 80018c4:	2101      	movs	r1, #1
 80018c6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1ab      	bne.n	8001828 <HAL_RCC_OscConfig+0x284>
 80018d0:	e003      	b.n	80018da <HAL_RCC_OscConfig+0x336>
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 817d 	beq.w	8001bea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018f0:	4ba6      	ldr	r3, [pc, #664]	; (8001b8c <HAL_RCC_OscConfig+0x5e8>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00b      	beq.n	8001914 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018fc:	4ba3      	ldr	r3, [pc, #652]	; (8001b8c <HAL_RCC_OscConfig+0x5e8>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	d172      	bne.n	80019ee <HAL_RCC_OscConfig+0x44a>
 8001908:	4ba0      	ldr	r3, [pc, #640]	; (8001b8c <HAL_RCC_OscConfig+0x5e8>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d16c      	bne.n	80019ee <HAL_RCC_OscConfig+0x44a>
 8001914:	2302      	movs	r3, #2
 8001916:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001926:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	095b      	lsrs	r3, r3, #5
 8001932:	b2db      	uxtb	r3, r3
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b01      	cmp	r3, #1
 800193c:	d102      	bne.n	8001944 <HAL_RCC_OscConfig+0x3a0>
 800193e:	4b93      	ldr	r3, [pc, #588]	; (8001b8c <HAL_RCC_OscConfig+0x5e8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	e013      	b.n	800196c <HAL_RCC_OscConfig+0x3c8>
 8001944:	2302      	movs	r3, #2
 8001946:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800194e:	fa93 f3a3 	rbit	r3, r3
 8001952:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001956:	2302      	movs	r3, #2
 8001958:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800195c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001960:	fa93 f3a3 	rbit	r3, r3
 8001964:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001968:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <HAL_RCC_OscConfig+0x5e8>)
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	2202      	movs	r2, #2
 800196e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001972:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001976:	fa92 f2a2 	rbit	r2, r2
 800197a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800197e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001982:	fab2 f282 	clz	r2, r2
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	f042 0220 	orr.w	r2, r2, #32
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	f002 021f 	and.w	r2, r2, #31
 8001992:	2101      	movs	r1, #1
 8001994:	fa01 f202 	lsl.w	r2, r1, r2
 8001998:	4013      	ands	r3, r2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00a      	beq.n	80019b4 <HAL_RCC_OscConfig+0x410>
 800199e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d002      	beq.n	80019b4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	f000 be2e 	b.w	8002610 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b75      	ldr	r3, [pc, #468]	; (8001b8c <HAL_RCC_OscConfig+0x5e8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	21f8      	movs	r1, #248	; 0xf8
 80019ca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80019d2:	fa91 f1a1 	rbit	r1, r1
 80019d6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80019da:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80019de:	fab1 f181 	clz	r1, r1
 80019e2:	b2c9      	uxtb	r1, r1
 80019e4:	408b      	lsls	r3, r1
 80019e6:	4969      	ldr	r1, [pc, #420]	; (8001b8c <HAL_RCC_OscConfig+0x5e8>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ec:	e0fd      	b.n	8001bea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8088 	beq.w	8001b10 <HAL_RCC_OscConfig+0x56c>
 8001a00:	2301      	movs	r3, #1
 8001a02:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a12:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	461a      	mov	r2, r3
 8001a28:	2301      	movs	r3, #1
 8001a2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f944 	bl	8000cb8 <HAL_GetTick>
 8001a30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff f93f 	bl	8000cb8 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d902      	bls.n	8001a4c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	f000 bde2 	b.w	8002610 <HAL_RCC_OscConfig+0x106c>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001a5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	095b      	lsrs	r3, r3, #5
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d102      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4d8>
 8001a76:	4b45      	ldr	r3, [pc, #276]	; (8001b8c <HAL_RCC_OscConfig+0x5e8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	e013      	b.n	8001aa4 <HAL_RCC_OscConfig+0x500>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a94:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001aa0:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <HAL_RCC_OscConfig+0x5e8>)
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001aaa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001aae:	fa92 f2a2 	rbit	r2, r2
 8001ab2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001ab6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001aba:	fab2 f282 	clz	r2, r2
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	f042 0220 	orr.w	r2, r2, #32
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	f002 021f 	and.w	r2, r2, #31
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0af      	beq.n	8001a36 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <HAL_RCC_OscConfig+0x5e8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	21f8      	movs	r1, #248	; 0xf8
 8001aec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001af4:	fa91 f1a1 	rbit	r1, r1
 8001af8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001afc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b00:	fab1 f181 	clz	r1, r1
 8001b04:	b2c9      	uxtb	r1, r1
 8001b06:	408b      	lsls	r3, r1
 8001b08:	4920      	ldr	r1, [pc, #128]	; (8001b8c <HAL_RCC_OscConfig+0x5e8>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
 8001b0e:	e06c      	b.n	8001bea <HAL_RCC_OscConfig+0x646>
 8001b10:	2301      	movs	r3, #1
 8001b12:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001b22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	461a      	mov	r2, r3
 8001b38:	2300      	movs	r3, #0
 8001b3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f8bc 	bl	8000cb8 <HAL_GetTick>
 8001b40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b44:	e00a      	b.n	8001b5c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b46:	f7ff f8b7 	bl	8000cb8 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d902      	bls.n	8001b5c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	f000 bd5a 	b.w	8002610 <HAL_RCC_OscConfig+0x106c>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001b6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	095b      	lsrs	r3, r3, #5
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d104      	bne.n	8001b90 <HAL_RCC_OscConfig+0x5ec>
 8001b86:	4b01      	ldr	r3, [pc, #4]	; (8001b8c <HAL_RCC_OscConfig+0x5e8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	e015      	b.n	8001bb8 <HAL_RCC_OscConfig+0x614>
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	2302      	movs	r3, #2
 8001b92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b9a:	fa93 f3a3 	rbit	r3, r3
 8001b9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ba8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001bb4:	4bc8      	ldr	r3, [pc, #800]	; (8001ed8 <HAL_RCC_OscConfig+0x934>)
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	2202      	movs	r2, #2
 8001bba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001bbe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001bc2:	fa92 f2a2 	rbit	r2, r2
 8001bc6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001bca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001bce:	fab2 f282 	clz	r2, r2
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	f042 0220 	orr.w	r2, r2, #32
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	f002 021f 	and.w	r2, r2, #31
 8001bde:	2101      	movs	r1, #1
 8001be0:	fa01 f202 	lsl.w	r2, r1, r2
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1ad      	bne.n	8001b46 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 8110 	beq.w	8001e20 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d079      	beq.n	8001d04 <HAL_RCC_OscConfig+0x760>
 8001c10:	2301      	movs	r3, #1
 8001c12:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4bab      	ldr	r3, [pc, #684]	; (8001edc <HAL_RCC_OscConfig+0x938>)
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	461a      	mov	r2, r3
 8001c36:	2301      	movs	r3, #1
 8001c38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f83d 	bl	8000cb8 <HAL_GetTick>
 8001c3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c44:	f7ff f838 	bl	8000cb8 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d902      	bls.n	8001c5a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	f000 bcdb 	b.w	8002610 <HAL_RCC_OscConfig+0x106c>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c70:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c74:	2202      	movs	r2, #2
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	fa93 f2a3 	rbit	r2, r3
 8001c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c98:	2202      	movs	r2, #2
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cb2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb4:	4b88      	ldr	r3, [pc, #544]	; (8001ed8 <HAL_RCC_OscConfig+0x934>)
 8001cb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	6019      	str	r1, [r3, #0]
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f1a3 	rbit	r1, r3
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cda:	6019      	str	r1, [r3, #0]
  return result;
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0a0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x6a0>
 8001d02:	e08d      	b.n	8001e20 <HAL_RCC_OscConfig+0x87c>
 8001d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	fa93 f2a3 	rbit	r2, r3
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d26:	601a      	str	r2, [r3, #0]
  return result;
 8001d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d30:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b68      	ldr	r3, [pc, #416]	; (8001edc <HAL_RCC_OscConfig+0x938>)
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	461a      	mov	r2, r3
 8001d42:	2300      	movs	r3, #0
 8001d44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d46:	f7fe ffb7 	bl	8000cb8 <HAL_GetTick>
 8001d4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d50:	f7fe ffb2 	bl	8000cb8 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d902      	bls.n	8001d66 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	f000 bc55 	b.w	8002610 <HAL_RCC_OscConfig+0x106c>
 8001d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d6e:	2202      	movs	r2, #2
 8001d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	fa93 f2a3 	rbit	r2, r3
 8001d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d84:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d92:	2202      	movs	r2, #2
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	fa93 f2a3 	rbit	r2, r3
 8001da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001db6:	2202      	movs	r2, #2
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	fa93 f2a3 	rbit	r2, r3
 8001dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dcc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001dd0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd2:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <HAL_RCC_OscConfig+0x934>)
 8001dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dda:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001dde:	2102      	movs	r1, #2
 8001de0:	6019      	str	r1, [r3, #0]
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	fa93 f1a3 	rbit	r1, r3
 8001df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001df8:	6019      	str	r1, [r3, #0]
  return result;
 8001dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	2101      	movs	r1, #1
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d197      	bne.n	8001d50 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 81a1 	beq.w	8002178 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3c:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_RCC_OscConfig+0x934>)
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d116      	bne.n	8001e76 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e48:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <HAL_RCC_OscConfig+0x934>)
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	4a22      	ldr	r2, [pc, #136]	; (8001ed8 <HAL_RCC_OscConfig+0x934>)
 8001e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e52:	61d3      	str	r3, [r2, #28]
 8001e54:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_RCC_OscConfig+0x934>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e6e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <HAL_RCC_OscConfig+0x93c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d11a      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_RCC_OscConfig+0x93c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <HAL_RCC_OscConfig+0x93c>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8e:	f7fe ff13 	bl	8000cb8 <HAL_GetTick>
 8001e92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e96:	e009      	b.n	8001eac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e98:	f7fe ff0e 	bl	8000cb8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b64      	cmp	r3, #100	; 0x64
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e3b1      	b.n	8002610 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_RCC_OscConfig+0x93c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ef      	beq.n	8001e98 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d10d      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x940>
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_RCC_OscConfig+0x934>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	4a02      	ldr	r2, [pc, #8]	; (8001ed8 <HAL_RCC_OscConfig+0x934>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6213      	str	r3, [r2, #32]
 8001ed4:	e03c      	b.n	8001f50 <HAL_RCC_OscConfig+0x9ac>
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	10908120 	.word	0x10908120
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10c      	bne.n	8001f0e <HAL_RCC_OscConfig+0x96a>
 8001ef4:	4bc1      	ldr	r3, [pc, #772]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4ac0      	ldr	r2, [pc, #768]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 8001efa:	f023 0301 	bic.w	r3, r3, #1
 8001efe:	6213      	str	r3, [r2, #32]
 8001f00:	4bbe      	ldr	r3, [pc, #760]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4abd      	ldr	r2, [pc, #756]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 8001f06:	f023 0304 	bic.w	r3, r3, #4
 8001f0a:	6213      	str	r3, [r2, #32]
 8001f0c:	e020      	b.n	8001f50 <HAL_RCC_OscConfig+0x9ac>
 8001f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x994>
 8001f1e:	4bb7      	ldr	r3, [pc, #732]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4ab6      	ldr	r2, [pc, #728]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	6213      	str	r3, [r2, #32]
 8001f2a:	4bb4      	ldr	r3, [pc, #720]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4ab3      	ldr	r2, [pc, #716]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	e00b      	b.n	8001f50 <HAL_RCC_OscConfig+0x9ac>
 8001f38:	4bb0      	ldr	r3, [pc, #704]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4aaf      	ldr	r2, [pc, #700]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	6213      	str	r3, [r2, #32]
 8001f44:	4bad      	ldr	r3, [pc, #692]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4aac      	ldr	r2, [pc, #688]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 8001f4a:	f023 0304 	bic.w	r3, r3, #4
 8001f4e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 8081 	beq.w	8002064 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f62:	f7fe fea9 	bl	8000cb8 <HAL_GetTick>
 8001f66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6a:	e00b      	b.n	8001f84 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f6c:	f7fe fea4 	bl	8000cb8 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e345      	b.n	8002610 <HAL_RCC_OscConfig+0x106c>
 8001f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f88:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f94:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	fa93 f2a3 	rbit	r2, r3
 8001f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	fa93 f2a3 	rbit	r2, r3
 8001fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001fca:	601a      	str	r2, [r3, #0]
  return result;
 8001fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001fd4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	095b      	lsrs	r3, r3, #5
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d102      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xa4c>
 8001fea:	4b84      	ldr	r3, [pc, #528]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	e013      	b.n	8002018 <HAL_RCC_OscConfig+0xa74>
 8001ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002000:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	fa93 f2a3 	rbit	r2, r3
 800200a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	4b79      	ldr	r3, [pc, #484]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800201c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002020:	2102      	movs	r1, #2
 8002022:	6011      	str	r1, [r2, #0]
 8002024:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002028:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	fa92 f1a2 	rbit	r1, r2
 8002032:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002036:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800203a:	6011      	str	r1, [r2, #0]
  return result;
 800203c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002040:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	fab2 f282 	clz	r2, r2
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	f002 021f 	and.w	r2, r2, #31
 8002056:	2101      	movs	r1, #1
 8002058:	fa01 f202 	lsl.w	r2, r1, r2
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d084      	beq.n	8001f6c <HAL_RCC_OscConfig+0x9c8>
 8002062:	e07f      	b.n	8002164 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002064:	f7fe fe28 	bl	8000cb8 <HAL_GetTick>
 8002068:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206c:	e00b      	b.n	8002086 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7fe fe23 	bl	8000cb8 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e2c4      	b.n	8002610 <HAL_RCC_OscConfig+0x106c>
 8002086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800208e:	2202      	movs	r2, #2
 8002090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002096:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	fa93 f2a3 	rbit	r2, r3
 80020a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020b2:	2202      	movs	r2, #2
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	fa93 f2a3 	rbit	r2, r3
 80020c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020cc:	601a      	str	r2, [r3, #0]
  return result;
 80020ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f043 0302 	orr.w	r3, r3, #2
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d102      	bne.n	80020f2 <HAL_RCC_OscConfig+0xb4e>
 80020ec:	4b43      	ldr	r3, [pc, #268]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	e013      	b.n	800211a <HAL_RCC_OscConfig+0xb76>
 80020f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020fa:	2202      	movs	r2, #2
 80020fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002102:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	fa93 f2a3 	rbit	r2, r3
 800210c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002110:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	4b39      	ldr	r3, [pc, #228]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800211e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002122:	2102      	movs	r1, #2
 8002124:	6011      	str	r1, [r2, #0]
 8002126:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800212a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	fa92 f1a2 	rbit	r1, r2
 8002134:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002138:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800213c:	6011      	str	r1, [r2, #0]
  return result;
 800213e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002142:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	fab2 f282 	clz	r2, r2
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	f002 021f 	and.w	r2, r2, #31
 8002158:	2101      	movs	r1, #1
 800215a:	fa01 f202 	lsl.w	r2, r1, r2
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d184      	bne.n	800206e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002164:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002168:	2b01      	cmp	r3, #1
 800216a:	d105      	bne.n	8002178 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216c:	4b23      	ldr	r3, [pc, #140]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	4a22      	ldr	r2, [pc, #136]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 8002172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002176:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 8242 	beq.w	800260e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800218a:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <HAL_RCC_OscConfig+0xc58>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b08      	cmp	r3, #8
 8002194:	f000 8213 	beq.w	80025be <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	f040 8162 	bne.w	800246e <HAL_RCC_OscConfig+0xeca>
 80021aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80021b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021bc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	fa93 f2a3 	rbit	r2, r3
 80021c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021ce:	601a      	str	r2, [r3, #0]
  return result;
 80021d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	461a      	mov	r2, r3
 80021ec:	2300      	movs	r3, #0
 80021ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7fe fd62 	bl	8000cb8 <HAL_GetTick>
 80021f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f8:	e00c      	b.n	8002214 <HAL_RCC_OscConfig+0xc70>
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002200:	f7fe fd5a 	bl	8000cb8 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e1fd      	b.n	8002610 <HAL_RCC_OscConfig+0x106c>
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800221c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002226:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002234:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002238:	601a      	str	r2, [r3, #0]
  return result;
 800223a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002242:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b01      	cmp	r3, #1
 8002256:	d102      	bne.n	800225e <HAL_RCC_OscConfig+0xcba>
 8002258:	4bb0      	ldr	r3, [pc, #704]	; (800251c <HAL_RCC_OscConfig+0xf78>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	e027      	b.n	80022ae <HAL_RCC_OscConfig+0xd0a>
 800225e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002262:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002266:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800226a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002270:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f2a3 	rbit	r2, r3
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002288:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800228c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002296:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	fa93 f2a3 	rbit	r2, r3
 80022a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	4b9c      	ldr	r3, [pc, #624]	; (800251c <HAL_RCC_OscConfig+0xf78>)
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022b2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80022b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022ba:	6011      	str	r1, [r2, #0]
 80022bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022c0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	fa92 f1a2 	rbit	r1, r2
 80022ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022d2:	6011      	str	r1, [r2, #0]
  return result;
 80022d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022d8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	fab2 f282 	clz	r2, r2
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	f042 0220 	orr.w	r2, r2, #32
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	f002 021f 	and.w	r2, r2, #31
 80022ee:	2101      	movs	r1, #1
 80022f0:	fa01 f202 	lsl.w	r2, r1, r2
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d182      	bne.n	8002200 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fa:	4b88      	ldr	r3, [pc, #544]	; (800251c <HAL_RCC_OscConfig+0xf78>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800230e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002312:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	430b      	orrs	r3, r1
 800231c:	497f      	ldr	r1, [pc, #508]	; (800251c <HAL_RCC_OscConfig+0xf78>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]
 8002322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002326:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800232a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800232e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	fa93 f2a3 	rbit	r2, r3
 800233e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002342:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002346:	601a      	str	r2, [r3, #0]
  return result;
 8002348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002350:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800235c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	461a      	mov	r2, r3
 8002364:	2301      	movs	r3, #1
 8002366:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7fe fca6 	bl	8000cb8 <HAL_GetTick>
 800236c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002370:	e009      	b.n	8002386 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002372:	f7fe fca1 	bl	8000cb8 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e144      	b.n	8002610 <HAL_RCC_OscConfig+0x106c>
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800238e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002398:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	fa93 f2a3 	rbit	r2, r3
 80023a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023aa:	601a      	str	r2, [r3, #0]
  return result;
 80023ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d102      	bne.n	80023d0 <HAL_RCC_OscConfig+0xe2c>
 80023ca:	4b54      	ldr	r3, [pc, #336]	; (800251c <HAL_RCC_OscConfig+0xf78>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	e027      	b.n	8002420 <HAL_RCC_OscConfig+0xe7c>
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	fa93 f2a3 	rbit	r2, r3
 80023ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80023fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002408:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	fa93 f2a3 	rbit	r2, r3
 8002412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002416:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	4b3f      	ldr	r3, [pc, #252]	; (800251c <HAL_RCC_OscConfig+0xf78>)
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002424:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002428:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800242c:	6011      	str	r1, [r2, #0]
 800242e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002432:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	fa92 f1a2 	rbit	r1, r2
 800243c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002440:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002444:	6011      	str	r1, [r2, #0]
  return result;
 8002446:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800244a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	fab2 f282 	clz	r2, r2
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	f042 0220 	orr.w	r2, r2, #32
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	f002 021f 	and.w	r2, r2, #31
 8002460:	2101      	movs	r1, #1
 8002462:	fa01 f202 	lsl.w	r2, r1, r2
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d082      	beq.n	8002372 <HAL_RCC_OscConfig+0xdce>
 800246c:	e0cf      	b.n	800260e <HAL_RCC_OscConfig+0x106a>
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002476:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800247a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002480:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fa93 f2a3 	rbit	r2, r3
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002492:	601a      	str	r2, [r3, #0]
  return result;
 8002494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002498:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800249c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	461a      	mov	r2, r3
 80024b0:	2300      	movs	r3, #0
 80024b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7fe fc00 	bl	8000cb8 <HAL_GetTick>
 80024b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024bc:	e009      	b.n	80024d2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024be:	f7fe fbfb 	bl	8000cb8 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e09e      	b.n	8002610 <HAL_RCC_OscConfig+0x106c>
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	fa93 f2a3 	rbit	r2, r3
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80024f6:	601a      	str	r2, [r3, #0]
  return result;
 80024f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002500:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d104      	bne.n	8002520 <HAL_RCC_OscConfig+0xf7c>
 8002516:	4b01      	ldr	r3, [pc, #4]	; (800251c <HAL_RCC_OscConfig+0xf78>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	e029      	b.n	8002570 <HAL_RCC_OscConfig+0xfcc>
 800251c:	40021000 	.word	0x40021000
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002528:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800252c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	fa93 f2a3 	rbit	r2, r3
 800253c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002540:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800254e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	fa93 f2a3 	rbit	r2, r3
 8002562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002566:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	4b2b      	ldr	r3, [pc, #172]	; (800261c <HAL_RCC_OscConfig+0x1078>)
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002574:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002578:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800257c:	6011      	str	r1, [r2, #0]
 800257e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002582:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	fa92 f1a2 	rbit	r1, r2
 800258c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002590:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002594:	6011      	str	r1, [r2, #0]
  return result;
 8002596:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800259a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	fab2 f282 	clz	r2, r2
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	f042 0220 	orr.w	r2, r2, #32
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	f002 021f 	and.w	r2, r2, #31
 80025b0:	2101      	movs	r1, #1
 80025b2:	fa01 f202 	lsl.w	r2, r1, r2
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d180      	bne.n	80024be <HAL_RCC_OscConfig+0xf1a>
 80025bc:	e027      	b.n	800260e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e01e      	b.n	8002610 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_RCC_OscConfig+0x1078>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025de:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d10b      	bne.n	800260a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80025f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002606:	429a      	cmp	r2, r3
 8002608:	d001      	beq.n	800260e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000

08002620 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b09e      	sub	sp, #120	; 0x78
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e162      	b.n	80028fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002638:	4b90      	ldr	r3, [pc, #576]	; (800287c <HAL_RCC_ClockConfig+0x25c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d910      	bls.n	8002668 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b8d      	ldr	r3, [pc, #564]	; (800287c <HAL_RCC_ClockConfig+0x25c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 0207 	bic.w	r2, r3, #7
 800264e:	498b      	ldr	r1, [pc, #556]	; (800287c <HAL_RCC_ClockConfig+0x25c>)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	4b89      	ldr	r3, [pc, #548]	; (800287c <HAL_RCC_ClockConfig+0x25c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e14a      	b.n	80028fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002674:	4b82      	ldr	r3, [pc, #520]	; (8002880 <HAL_RCC_ClockConfig+0x260>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	497f      	ldr	r1, [pc, #508]	; (8002880 <HAL_RCC_ClockConfig+0x260>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 80dc 	beq.w	800284c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d13c      	bne.n	8002716 <HAL_RCC_ClockConfig+0xf6>
 800269c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d102      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xa6>
 80026c0:	4b6f      	ldr	r3, [pc, #444]	; (8002880 <HAL_RCC_ClockConfig+0x260>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	e00f      	b.n	80026e6 <HAL_RCC_ClockConfig+0xc6>
 80026c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	667b      	str	r3, [r7, #100]	; 0x64
 80026d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d8:	663b      	str	r3, [r7, #96]	; 0x60
 80026da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026e2:	4b67      	ldr	r3, [pc, #412]	; (8002880 <HAL_RCC_ClockConfig+0x260>)
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80026ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026ee:	fa92 f2a2 	rbit	r2, r2
 80026f2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80026f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026f6:	fab2 f282 	clz	r2, r2
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f042 0220 	orr.w	r2, r2, #32
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	f002 021f 	and.w	r2, r2, #31
 8002706:	2101      	movs	r1, #1
 8002708:	fa01 f202 	lsl.w	r2, r1, r2
 800270c:	4013      	ands	r3, r2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d17b      	bne.n	800280a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0f3      	b.n	80028fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d13c      	bne.n	8002798 <HAL_RCC_ClockConfig+0x178>
 800271e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002722:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800272c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d102      	bne.n	8002748 <HAL_RCC_ClockConfig+0x128>
 8002742:	4b4f      	ldr	r3, [pc, #316]	; (8002880 <HAL_RCC_ClockConfig+0x260>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	e00f      	b.n	8002768 <HAL_RCC_ClockConfig+0x148>
 8002748:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002750:	fa93 f3a3 	rbit	r3, r3
 8002754:	647b      	str	r3, [r7, #68]	; 0x44
 8002756:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800275a:	643b      	str	r3, [r7, #64]	; 0x40
 800275c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002764:	4b46      	ldr	r3, [pc, #280]	; (8002880 <HAL_RCC_ClockConfig+0x260>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800276c:	63ba      	str	r2, [r7, #56]	; 0x38
 800276e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002770:	fa92 f2a2 	rbit	r2, r2
 8002774:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002778:	fab2 f282 	clz	r2, r2
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	f042 0220 	orr.w	r2, r2, #32
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	f002 021f 	and.w	r2, r2, #31
 8002788:	2101      	movs	r1, #1
 800278a:	fa01 f202 	lsl.w	r2, r1, r2
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d13a      	bne.n	800280a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0b2      	b.n	80028fe <HAL_RCC_ClockConfig+0x2de>
 8002798:	2302      	movs	r3, #2
 800279a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d102      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x1a0>
 80027ba:	4b31      	ldr	r3, [pc, #196]	; (8002880 <HAL_RCC_ClockConfig+0x260>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	e00d      	b.n	80027dc <HAL_RCC_ClockConfig+0x1bc>
 80027c0:	2302      	movs	r3, #2
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
 80027cc:	2302      	movs	r3, #2
 80027ce:	623b      	str	r3, [r7, #32]
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	61fb      	str	r3, [r7, #28]
 80027d8:	4b29      	ldr	r3, [pc, #164]	; (8002880 <HAL_RCC_ClockConfig+0x260>)
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	2202      	movs	r2, #2
 80027de:	61ba      	str	r2, [r7, #24]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	fa92 f2a2 	rbit	r2, r2
 80027e6:	617a      	str	r2, [r7, #20]
  return result;
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	fab2 f282 	clz	r2, r2
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	f042 0220 	orr.w	r2, r2, #32
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	f002 021f 	and.w	r2, r2, #31
 80027fa:	2101      	movs	r1, #1
 80027fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002800:	4013      	ands	r3, r2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e079      	b.n	80028fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_RCC_ClockConfig+0x260>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f023 0203 	bic.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	491a      	ldr	r1, [pc, #104]	; (8002880 <HAL_RCC_ClockConfig+0x260>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800281c:	f7fe fa4c 	bl	8000cb8 <HAL_GetTick>
 8002820:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	e00a      	b.n	800283a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7fe fa48 	bl	8000cb8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e061      	b.n	80028fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_RCC_ClockConfig+0x260>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 020c 	and.w	r2, r3, #12
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	429a      	cmp	r2, r3
 800284a:	d1eb      	bne.n	8002824 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_ClockConfig+0x25c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d214      	bcs.n	8002884 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_RCC_ClockConfig+0x25c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 0207 	bic.w	r2, r3, #7
 8002862:	4906      	ldr	r1, [pc, #24]	; (800287c <HAL_RCC_ClockConfig+0x25c>)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b04      	ldr	r3, [pc, #16]	; (800287c <HAL_RCC_ClockConfig+0x25c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e040      	b.n	80028fe <HAL_RCC_ClockConfig+0x2de>
 800287c:	40022000 	.word	0x40022000
 8002880:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HAL_RCC_ClockConfig+0x2e8>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	491a      	ldr	r1, [pc, #104]	; (8002908 <HAL_RCC_ClockConfig+0x2e8>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ae:	4b16      	ldr	r3, [pc, #88]	; (8002908 <HAL_RCC_ClockConfig+0x2e8>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4912      	ldr	r1, [pc, #72]	; (8002908 <HAL_RCC_ClockConfig+0x2e8>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028c2:	f000 f829 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80028c6:	4601      	mov	r1, r0
 80028c8:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <HAL_RCC_ClockConfig+0x2e8>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d0:	22f0      	movs	r2, #240	; 0xf0
 80028d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	fa92 f2a2 	rbit	r2, r2
 80028da:	60fa      	str	r2, [r7, #12]
  return result;
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	fab2 f282 	clz	r2, r2
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	40d3      	lsrs	r3, r2
 80028e6:	4a09      	ldr	r2, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x2ec>)
 80028e8:	5cd3      	ldrb	r3, [r2, r3]
 80028ea:	fa21 f303 	lsr.w	r3, r1, r3
 80028ee:	4a08      	ldr	r2, [pc, #32]	; (8002910 <HAL_RCC_ClockConfig+0x2f0>)
 80028f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <HAL_RCC_ClockConfig+0x2f4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe f99a 	bl	8000c30 <HAL_InitTick>
  
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3778      	adds	r7, #120	; 0x78
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
 800290c:	0800497c 	.word	0x0800497c
 8002910:	20000000 	.word	0x20000000
 8002914:	20000004 	.word	0x20000004

08002918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002932:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b04      	cmp	r3, #4
 8002940:	d002      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x30>
 8002942:	2b08      	cmp	r3, #8
 8002944:	d003      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x36>
 8002946:	e026      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800294a:	613b      	str	r3, [r7, #16]
      break;
 800294c:	e026      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	0c9b      	lsrs	r3, r3, #18
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	4a17      	ldr	r2, [pc, #92]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002958:	5cd3      	ldrb	r3, [r2, r3]
 800295a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <HAL_RCC_GetSysClockFreq+0x94>)
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002966:	5cd3      	ldrb	r3, [r2, r3]
 8002968:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002974:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	fbb2 f2f3 	udiv	r2, r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	e004      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a0c      	ldr	r2, [pc, #48]	; (80029bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	613b      	str	r3, [r7, #16]
      break;
 8002994:	e002      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002998:	613b      	str	r3, [r7, #16]
      break;
 800299a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800299c:	693b      	ldr	r3, [r7, #16]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000
 80029b0:	007a1200 	.word	0x007a1200
 80029b4:	08004994 	.word	0x08004994
 80029b8:	080049a4 	.word	0x080049a4
 80029bc:	003d0900 	.word	0x003d0900

080029c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000000 	.word	0x20000000

080029d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029de:	f7ff ffef 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 80029e2:	4601      	mov	r1, r0
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	fa92 f2a2 	rbit	r2, r2
 80029f8:	603a      	str	r2, [r7, #0]
  return result;
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	fab2 f282 	clz	r2, r2
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	40d3      	lsrs	r3, r2
 8002a04:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a06:	5cd3      	ldrb	r3, [r2, r3]
 8002a08:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	0800498c 	.word	0x0800498c

08002a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a22:	f7ff ffcd 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 8002a26:	4601      	mov	r1, r0
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a30:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	fa92 f2a2 	rbit	r2, r2
 8002a3c:	603a      	str	r2, [r7, #0]
  return result;
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	fab2 f282 	clz	r2, r2
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	40d3      	lsrs	r3, r2
 8002a48:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a4a:	5cd3      	ldrb	r3, [r2, r3]
 8002a4c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	0800498c 	.word	0x0800498c

08002a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b092      	sub	sp, #72	; 0x48
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80d4 	beq.w	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a84:	4b4e      	ldr	r3, [pc, #312]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10e      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a90:	4b4b      	ldr	r3, [pc, #300]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	4a4a      	ldr	r2, [pc, #296]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	61d3      	str	r3, [r2, #28]
 8002a9c:	4b48      	ldr	r3, [pc, #288]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aae:	4b45      	ldr	r3, [pc, #276]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d118      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aba:	4b42      	ldr	r3, [pc, #264]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a41      	ldr	r2, [pc, #260]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac6:	f7fe f8f7 	bl	8000cb8 <HAL_GetTick>
 8002aca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002acc:	e008      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ace:	f7fe f8f3 	bl	8000cb8 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b64      	cmp	r3, #100	; 0x64
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e169      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae0:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aec:	4b34      	ldr	r3, [pc, #208]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8084 	beq.w	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d07c      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b0c:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b26      	ldr	r3, [pc, #152]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	461a      	mov	r2, r3
 8002b36:	2301      	movs	r3, #1
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b5e:	4a18      	ldr	r2, [pc, #96]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b62:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d04b      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7fe f8a3 	bl	8000cb8 <HAL_GetTick>
 8002b72:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b76:	f7fe f89f 	bl	8000cb8 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e113      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
 8002b98:	2302      	movs	r3, #2
 8002b9a:	623b      	str	r3, [r7, #32]
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	61fb      	str	r3, [r7, #28]
  return result;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d108      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002bba:	4b01      	ldr	r3, [pc, #4]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	e00d      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40007000 	.word	0x40007000
 8002bc8:	10908100 	.word	0x10908100
 8002bcc:	2302      	movs	r3, #2
 8002bce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	4b78      	ldr	r3, [pc, #480]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	2202      	movs	r2, #2
 8002bde:	613a      	str	r2, [r7, #16]
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	fa92 f2a2 	rbit	r2, r2
 8002be6:	60fa      	str	r2, [r7, #12]
  return result;
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	fab2 f282 	clz	r2, r2
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	f002 021f 	and.w	r2, r2, #31
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0b7      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c06:	4b6d      	ldr	r3, [pc, #436]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	496a      	ldr	r1, [pc, #424]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c20:	4b66      	ldr	r3, [pc, #408]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	4a65      	ldr	r2, [pc, #404]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c38:	4b60      	ldr	r3, [pc, #384]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	f023 0203 	bic.w	r2, r3, #3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	495d      	ldr	r1, [pc, #372]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c56:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	4956      	ldr	r1, [pc, #344]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c74:	4b51      	ldr	r3, [pc, #324]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	494e      	ldr	r1, [pc, #312]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c92:	4b4a      	ldr	r3, [pc, #296]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f023 0210 	bic.w	r2, r3, #16
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	4947      	ldr	r1, [pc, #284]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002cb0:	4b42      	ldr	r3, [pc, #264]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	493f      	ldr	r1, [pc, #252]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d008      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cce:	4b3b      	ldr	r3, [pc, #236]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f023 0220 	bic.w	r2, r3, #32
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	4938      	ldr	r1, [pc, #224]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cec:	4b33      	ldr	r3, [pc, #204]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	4930      	ldr	r1, [pc, #192]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d0a:	4b2c      	ldr	r3, [pc, #176]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	4929      	ldr	r1, [pc, #164]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d28:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	4921      	ldr	r1, [pc, #132]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d46:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	491a      	ldr	r1, [pc, #104]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002d64:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	4912      	ldr	r1, [pc, #72]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d82:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	490b      	ldr	r1, [pc, #44]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dac:	4903      	ldr	r1, [pc, #12]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3748      	adds	r7, #72	; 0x48
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e040      	b.n	8002e54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fd fdb6 	bl	8000954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2224      	movs	r2, #36	; 0x24
 8002dec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0201 	bic.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fe42 	bl	8003a90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fc6b 	bl	80036e8 <UART_SetConfig>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e01b      	b.n	8002e54 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fec1 	bl	8003bd4 <UART_CheckIdleState>
 8002e52:	4603      	mov	r3, r0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	; 0x28
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d178      	bne.n	8002f66 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <HAL_UART_Transmit+0x24>
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e071      	b.n	8002f68 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2221      	movs	r2, #33	; 0x21
 8002e90:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e92:	f7fd ff11 	bl	8000cb8 <HAL_GetTick>
 8002e96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	88fa      	ldrh	r2, [r7, #6]
 8002e9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	88fa      	ldrh	r2, [r7, #6]
 8002ea4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb0:	d108      	bne.n	8002ec4 <HAL_UART_Transmit+0x68>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d104      	bne.n	8002ec4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	e003      	b.n	8002ecc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ecc:	e030      	b.n	8002f30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2180      	movs	r1, #128	; 0x80
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 ff23 	bl	8003d24 <UART_WaitOnFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d004      	beq.n	8002eee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e03c      	b.n	8002f68 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10b      	bne.n	8002f0c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	881a      	ldrh	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f00:	b292      	uxth	r2, r2
 8002f02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	3302      	adds	r3, #2
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	e008      	b.n	8002f1e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	781a      	ldrb	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	b292      	uxth	r2, r2
 8002f16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1c8      	bne.n	8002ece <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2200      	movs	r2, #0
 8002f44:	2140      	movs	r1, #64	; 0x40
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 feec 	bl	8003d24 <UART_WaitOnFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d004      	beq.n	8002f5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e005      	b.n	8002f68 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e000      	b.n	8002f68 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
  }
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3720      	adds	r7, #32
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	f040 80a3 	bne.w	80030d2 <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_UART_Receive+0x28>
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e09b      	b.n	80030d4 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2222      	movs	r2, #34	; 0x22
 8002fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fb2:	f7fd fe81 	bl	8000cb8 <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	88fa      	ldrh	r2, [r7, #6]
 8002fbc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_UART_Receive+0x80>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d105      	bne.n	8002fe6 <HAL_UART_Receive+0x76>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002fe0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002fe4:	e01a      	b.n	800301c <HAL_UART_Receive+0xac>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	22ff      	movs	r2, #255	; 0xff
 8002fea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002fee:	e015      	b.n	800301c <HAL_UART_Receive+0xac>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10d      	bne.n	8003014 <HAL_UART_Receive+0xa4>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d104      	bne.n	800300a <HAL_UART_Receive+0x9a>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	22ff      	movs	r2, #255	; 0xff
 8003004:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003008:	e008      	b.n	800301c <HAL_UART_Receive+0xac>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	227f      	movs	r2, #127	; 0x7f
 800300e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003012:	e003      	b.n	800301c <HAL_UART_Receive+0xac>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003022:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302c:	d108      	bne.n	8003040 <HAL_UART_Receive+0xd0>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d104      	bne.n	8003040 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	e003      	b.n	8003048 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003048:	e037      	b.n	80030ba <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2200      	movs	r2, #0
 8003052:	2120      	movs	r1, #32
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fe65 	bl	8003d24 <UART_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e033      	b.n	80030d4 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10c      	bne.n	800308c <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003078:	b29a      	uxth	r2, r3
 800307a:	8a7b      	ldrh	r3, [r7, #18]
 800307c:	4013      	ands	r3, r2
 800307e:	b29a      	uxth	r2, r3
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	3302      	adds	r3, #2
 8003088:	61bb      	str	r3, [r7, #24]
 800308a:	e00d      	b.n	80030a8 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003092:	b29b      	uxth	r3, r3
 8003094:	b2da      	uxtb	r2, r3
 8003096:	8a7b      	ldrh	r3, [r7, #18]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	4013      	ands	r3, r2
 800309c:	b2da      	uxtb	r2, r3
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3301      	adds	r3, #1
 80030a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1c1      	bne.n	800304a <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e000      	b.n	80030d4 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 80030d2:	2302      	movs	r3, #2
  }
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3720      	adds	r7, #32
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b0ba      	sub	sp, #232	; 0xe8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003102:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003106:	f640 030f 	movw	r3, #2063	; 0x80f
 800310a:	4013      	ands	r3, r2
 800310c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003110:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d115      	bne.n	8003144 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00f      	beq.n	8003144 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d009      	beq.n	8003144 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 82ab 	beq.w	8003690 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	4798      	blx	r3
      }
      return;
 8003142:	e2a5      	b.n	8003690 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 8117 	beq.w	800337c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800314e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800315a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800315e:	4b85      	ldr	r3, [pc, #532]	; (8003374 <HAL_UART_IRQHandler+0x298>)
 8003160:	4013      	ands	r3, r2
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 810a 	beq.w	800337c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d011      	beq.n	8003198 <HAL_UART_IRQHandler+0xbc>
 8003174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00b      	beq.n	8003198 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2201      	movs	r2, #1
 8003186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318e:	f043 0201 	orr.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d011      	beq.n	80031c8 <HAL_UART_IRQHandler+0xec>
 80031a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2202      	movs	r2, #2
 80031b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031be:	f043 0204 	orr.w	r2, r3, #4
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d011      	beq.n	80031f8 <HAL_UART_IRQHandler+0x11c>
 80031d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2204      	movs	r2, #4
 80031e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ee:	f043 0202 	orr.w	r2, r3, #2
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d017      	beq.n	8003234 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d105      	bne.n	800321c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003214:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00b      	beq.n	8003234 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2208      	movs	r2, #8
 8003222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800322a:	f043 0208 	orr.w	r2, r3, #8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800323c:	2b00      	cmp	r3, #0
 800323e:	d012      	beq.n	8003266 <HAL_UART_IRQHandler+0x18a>
 8003240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003244:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00c      	beq.n	8003266 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003254:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800325c:	f043 0220 	orr.w	r2, r3, #32
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8211 	beq.w	8003694 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00d      	beq.n	800329a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800327e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	d005      	beq.n	80032be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d04f      	beq.n	800335e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fd9d 	bl	8003dfe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b40      	cmp	r3, #64	; 0x40
 80032d0:	d141      	bne.n	8003356 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3308      	adds	r3, #8
 80032d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032e0:	e853 3f00 	ldrex	r3, [r3]
 80032e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80032e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	3308      	adds	r3, #8
 80032fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80032fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800330a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800330e:	e841 2300 	strex	r3, r2, [r1]
 8003312:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1d9      	bne.n	80032d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003322:	2b00      	cmp	r3, #0
 8003324:	d013      	beq.n	800334e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332a:	4a13      	ldr	r2, [pc, #76]	; (8003378 <HAL_UART_IRQHandler+0x29c>)
 800332c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd fe86 	bl	8001044 <HAL_DMA_Abort_IT>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d017      	beq.n	800336e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003348:	4610      	mov	r0, r2
 800334a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334c:	e00f      	b.n	800336e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f9b4 	bl	80036bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003354:	e00b      	b.n	800336e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f9b0 	bl	80036bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335c:	e007      	b.n	800336e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f9ac 	bl	80036bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800336c:	e192      	b.n	8003694 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336e:	bf00      	nop
    return;
 8003370:	e190      	b.n	8003694 <HAL_UART_IRQHandler+0x5b8>
 8003372:	bf00      	nop
 8003374:	04000120 	.word	0x04000120
 8003378:	08003ec7 	.word	0x08003ec7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003380:	2b01      	cmp	r3, #1
 8003382:	f040 814b 	bne.w	800361c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8144 	beq.w	800361c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 813d 	beq.w	800361c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2210      	movs	r2, #16
 80033a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b4:	2b40      	cmp	r3, #64	; 0x40
 80033b6:	f040 80b5 	bne.w	8003524 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8164 	beq.w	8003698 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80033d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033da:	429a      	cmp	r2, r3
 80033dc:	f080 815c 	bcs.w	8003698 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	f000 8086 	beq.w	8003502 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003402:	e853 3f00 	ldrex	r3, [r3]
 8003406:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800340a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800340e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003412:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003420:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003424:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003428:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800342c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003430:	e841 2300 	strex	r3, r2, [r1]
 8003434:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003438:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1da      	bne.n	80033f6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3308      	adds	r3, #8
 8003446:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800344a:	e853 3f00 	ldrex	r3, [r3]
 800344e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003450:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3308      	adds	r3, #8
 8003460:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003464:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003468:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800346c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003470:	e841 2300 	strex	r3, r2, [r1]
 8003474:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e1      	bne.n	8003440 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3308      	adds	r3, #8
 8003482:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003486:	e853 3f00 	ldrex	r3, [r3]
 800348a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800348c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800348e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003492:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3308      	adds	r3, #8
 800349c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034a0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034a8:	e841 2300 	strex	r3, r2, [r1]
 80034ac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e3      	bne.n	800347c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d2:	f023 0310 	bic.w	r3, r3, #16
 80034d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80034e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80034f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e4      	bne.n	80034c2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd fd63 	bl	8000fc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2202      	movs	r2, #2
 8003506:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003514:	b29b      	uxth	r3, r3
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	b29b      	uxth	r3, r3
 800351a:	4619      	mov	r1, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f8d7 	bl	80036d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003522:	e0b9      	b.n	8003698 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003530:	b29b      	uxth	r3, r3
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80ab 	beq.w	800369c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003546:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80a6 	beq.w	800369c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003558:	e853 3f00 	ldrex	r3, [r3]
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800355e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003560:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003564:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003572:	647b      	str	r3, [r7, #68]	; 0x44
 8003574:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003576:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003578:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800357a:	e841 2300 	strex	r3, r2, [r1]
 800357e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e4      	bne.n	8003550 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3308      	adds	r3, #8
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	e853 3f00 	ldrex	r3, [r3]
 8003594:	623b      	str	r3, [r7, #32]
   return(result);
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	f023 0301 	bic.w	r3, r3, #1
 800359c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3308      	adds	r3, #8
 80035a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035aa:	633a      	str	r2, [r7, #48]	; 0x30
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e3      	bne.n	8003586 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	e853 3f00 	ldrex	r3, [r3]
 80035de:	60fb      	str	r3, [r7, #12]
   return(result);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0310 	bic.w	r3, r3, #16
 80035e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f8:	69b9      	ldr	r1, [r7, #24]
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	e841 2300 	strex	r3, r2, [r1]
 8003600:	617b      	str	r3, [r7, #20]
   return(result);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e4      	bne.n	80035d2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800360e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003612:	4619      	mov	r1, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f85b 	bl	80036d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800361a:	e03f      	b.n	800369c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800361c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00e      	beq.n	8003646 <HAL_UART_IRQHandler+0x56a>
 8003628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800362c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800363c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fc81 	bl	8003f46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003644:	e02d      	b.n	80036a2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00e      	beq.n	8003670 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01c      	beq.n	80036a0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	4798      	blx	r3
    }
    return;
 800366e:	e017      	b.n	80036a0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d012      	beq.n	80036a2 <HAL_UART_IRQHandler+0x5c6>
 800367c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00c      	beq.n	80036a2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fc32 	bl	8003ef2 <UART_EndTransmit_IT>
    return;
 800368e:	e008      	b.n	80036a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003690:	bf00      	nop
 8003692:	e006      	b.n	80036a2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003694:	bf00      	nop
 8003696:	e004      	b.n	80036a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003698:	bf00      	nop
 800369a:	e002      	b.n	80036a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 800369c:	bf00      	nop
 800369e:	e000      	b.n	80036a2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80036a0:	bf00      	nop
  }

}
 80036a2:	37e8      	adds	r7, #232	; 0xe8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003716:	f023 030c 	bic.w	r3, r3, #12
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	6979      	ldr	r1, [r7, #20]
 8003720:	430b      	orrs	r3, r1
 8003722:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	430a      	orrs	r2, r1
 800375c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4aa7      	ldr	r2, [pc, #668]	; (8003a00 <UART_SetConfig+0x318>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d120      	bne.n	80037aa <UART_SetConfig+0xc2>
 8003768:	4ba6      	ldr	r3, [pc, #664]	; (8003a04 <UART_SetConfig+0x31c>)
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	2b03      	cmp	r3, #3
 8003772:	d817      	bhi.n	80037a4 <UART_SetConfig+0xbc>
 8003774:	a201      	add	r2, pc, #4	; (adr r2, 800377c <UART_SetConfig+0x94>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	0800378d 	.word	0x0800378d
 8003780:	08003799 	.word	0x08003799
 8003784:	0800379f 	.word	0x0800379f
 8003788:	08003793 	.word	0x08003793
 800378c:	2301      	movs	r3, #1
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e0b5      	b.n	80038fe <UART_SetConfig+0x216>
 8003792:	2302      	movs	r3, #2
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e0b2      	b.n	80038fe <UART_SetConfig+0x216>
 8003798:	2304      	movs	r3, #4
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e0af      	b.n	80038fe <UART_SetConfig+0x216>
 800379e:	2308      	movs	r3, #8
 80037a0:	77fb      	strb	r3, [r7, #31]
 80037a2:	e0ac      	b.n	80038fe <UART_SetConfig+0x216>
 80037a4:	2310      	movs	r3, #16
 80037a6:	77fb      	strb	r3, [r7, #31]
 80037a8:	e0a9      	b.n	80038fe <UART_SetConfig+0x216>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a96      	ldr	r2, [pc, #600]	; (8003a08 <UART_SetConfig+0x320>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d124      	bne.n	80037fe <UART_SetConfig+0x116>
 80037b4:	4b93      	ldr	r3, [pc, #588]	; (8003a04 <UART_SetConfig+0x31c>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037c0:	d011      	beq.n	80037e6 <UART_SetConfig+0xfe>
 80037c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037c6:	d817      	bhi.n	80037f8 <UART_SetConfig+0x110>
 80037c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037cc:	d011      	beq.n	80037f2 <UART_SetConfig+0x10a>
 80037ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037d2:	d811      	bhi.n	80037f8 <UART_SetConfig+0x110>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <UART_SetConfig+0xf8>
 80037d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037dc:	d006      	beq.n	80037ec <UART_SetConfig+0x104>
 80037de:	e00b      	b.n	80037f8 <UART_SetConfig+0x110>
 80037e0:	2300      	movs	r3, #0
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e08b      	b.n	80038fe <UART_SetConfig+0x216>
 80037e6:	2302      	movs	r3, #2
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e088      	b.n	80038fe <UART_SetConfig+0x216>
 80037ec:	2304      	movs	r3, #4
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e085      	b.n	80038fe <UART_SetConfig+0x216>
 80037f2:	2308      	movs	r3, #8
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e082      	b.n	80038fe <UART_SetConfig+0x216>
 80037f8:	2310      	movs	r3, #16
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	e07f      	b.n	80038fe <UART_SetConfig+0x216>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a82      	ldr	r2, [pc, #520]	; (8003a0c <UART_SetConfig+0x324>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d124      	bne.n	8003852 <UART_SetConfig+0x16a>
 8003808:	4b7e      	ldr	r3, [pc, #504]	; (8003a04 <UART_SetConfig+0x31c>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003810:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003814:	d011      	beq.n	800383a <UART_SetConfig+0x152>
 8003816:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800381a:	d817      	bhi.n	800384c <UART_SetConfig+0x164>
 800381c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003820:	d011      	beq.n	8003846 <UART_SetConfig+0x15e>
 8003822:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003826:	d811      	bhi.n	800384c <UART_SetConfig+0x164>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <UART_SetConfig+0x14c>
 800382c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003830:	d006      	beq.n	8003840 <UART_SetConfig+0x158>
 8003832:	e00b      	b.n	800384c <UART_SetConfig+0x164>
 8003834:	2300      	movs	r3, #0
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e061      	b.n	80038fe <UART_SetConfig+0x216>
 800383a:	2302      	movs	r3, #2
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e05e      	b.n	80038fe <UART_SetConfig+0x216>
 8003840:	2304      	movs	r3, #4
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e05b      	b.n	80038fe <UART_SetConfig+0x216>
 8003846:	2308      	movs	r3, #8
 8003848:	77fb      	strb	r3, [r7, #31]
 800384a:	e058      	b.n	80038fe <UART_SetConfig+0x216>
 800384c:	2310      	movs	r3, #16
 800384e:	77fb      	strb	r3, [r7, #31]
 8003850:	e055      	b.n	80038fe <UART_SetConfig+0x216>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6e      	ldr	r2, [pc, #440]	; (8003a10 <UART_SetConfig+0x328>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d124      	bne.n	80038a6 <UART_SetConfig+0x1be>
 800385c:	4b69      	ldr	r3, [pc, #420]	; (8003a04 <UART_SetConfig+0x31c>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003864:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003868:	d011      	beq.n	800388e <UART_SetConfig+0x1a6>
 800386a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800386e:	d817      	bhi.n	80038a0 <UART_SetConfig+0x1b8>
 8003870:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003874:	d011      	beq.n	800389a <UART_SetConfig+0x1b2>
 8003876:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800387a:	d811      	bhi.n	80038a0 <UART_SetConfig+0x1b8>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <UART_SetConfig+0x1a0>
 8003880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003884:	d006      	beq.n	8003894 <UART_SetConfig+0x1ac>
 8003886:	e00b      	b.n	80038a0 <UART_SetConfig+0x1b8>
 8003888:	2300      	movs	r3, #0
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e037      	b.n	80038fe <UART_SetConfig+0x216>
 800388e:	2302      	movs	r3, #2
 8003890:	77fb      	strb	r3, [r7, #31]
 8003892:	e034      	b.n	80038fe <UART_SetConfig+0x216>
 8003894:	2304      	movs	r3, #4
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e031      	b.n	80038fe <UART_SetConfig+0x216>
 800389a:	2308      	movs	r3, #8
 800389c:	77fb      	strb	r3, [r7, #31]
 800389e:	e02e      	b.n	80038fe <UART_SetConfig+0x216>
 80038a0:	2310      	movs	r3, #16
 80038a2:	77fb      	strb	r3, [r7, #31]
 80038a4:	e02b      	b.n	80038fe <UART_SetConfig+0x216>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a5a      	ldr	r2, [pc, #360]	; (8003a14 <UART_SetConfig+0x32c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d124      	bne.n	80038fa <UART_SetConfig+0x212>
 80038b0:	4b54      	ldr	r3, [pc, #336]	; (8003a04 <UART_SetConfig+0x31c>)
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80038b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038bc:	d011      	beq.n	80038e2 <UART_SetConfig+0x1fa>
 80038be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038c2:	d817      	bhi.n	80038f4 <UART_SetConfig+0x20c>
 80038c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038c8:	d011      	beq.n	80038ee <UART_SetConfig+0x206>
 80038ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038ce:	d811      	bhi.n	80038f4 <UART_SetConfig+0x20c>
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <UART_SetConfig+0x1f4>
 80038d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d8:	d006      	beq.n	80038e8 <UART_SetConfig+0x200>
 80038da:	e00b      	b.n	80038f4 <UART_SetConfig+0x20c>
 80038dc:	2300      	movs	r3, #0
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e00d      	b.n	80038fe <UART_SetConfig+0x216>
 80038e2:	2302      	movs	r3, #2
 80038e4:	77fb      	strb	r3, [r7, #31]
 80038e6:	e00a      	b.n	80038fe <UART_SetConfig+0x216>
 80038e8:	2304      	movs	r3, #4
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e007      	b.n	80038fe <UART_SetConfig+0x216>
 80038ee:	2308      	movs	r3, #8
 80038f0:	77fb      	strb	r3, [r7, #31]
 80038f2:	e004      	b.n	80038fe <UART_SetConfig+0x216>
 80038f4:	2310      	movs	r3, #16
 80038f6:	77fb      	strb	r3, [r7, #31]
 80038f8:	e001      	b.n	80038fe <UART_SetConfig+0x216>
 80038fa:	2310      	movs	r3, #16
 80038fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003906:	d15b      	bne.n	80039c0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003908:	7ffb      	ldrb	r3, [r7, #31]
 800390a:	2b08      	cmp	r3, #8
 800390c:	d827      	bhi.n	800395e <UART_SetConfig+0x276>
 800390e:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <UART_SetConfig+0x22c>)
 8003910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003914:	08003939 	.word	0x08003939
 8003918:	08003941 	.word	0x08003941
 800391c:	08003949 	.word	0x08003949
 8003920:	0800395f 	.word	0x0800395f
 8003924:	0800394f 	.word	0x0800394f
 8003928:	0800395f 	.word	0x0800395f
 800392c:	0800395f 	.word	0x0800395f
 8003930:	0800395f 	.word	0x0800395f
 8003934:	08003957 	.word	0x08003957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003938:	f7ff f84e 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 800393c:	61b8      	str	r0, [r7, #24]
        break;
 800393e:	e013      	b.n	8003968 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003940:	f7ff f86c 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003944:	61b8      	str	r0, [r7, #24]
        break;
 8003946:	e00f      	b.n	8003968 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003948:	4b33      	ldr	r3, [pc, #204]	; (8003a18 <UART_SetConfig+0x330>)
 800394a:	61bb      	str	r3, [r7, #24]
        break;
 800394c:	e00c      	b.n	8003968 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800394e:	f7fe ffe3 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8003952:	61b8      	str	r0, [r7, #24]
        break;
 8003954:	e008      	b.n	8003968 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800395a:	61bb      	str	r3, [r7, #24]
        break;
 800395c:	e004      	b.n	8003968 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	77bb      	strb	r3, [r7, #30]
        break;
 8003966:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 8082 	beq.w	8003a74 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	005a      	lsls	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	085b      	lsrs	r3, r3, #1
 800397a:	441a      	add	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2b0f      	cmp	r3, #15
 800398a:	d916      	bls.n	80039ba <UART_SetConfig+0x2d2>
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003992:	d212      	bcs.n	80039ba <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	b29b      	uxth	r3, r3
 8003998:	f023 030f 	bic.w	r3, r3, #15
 800399c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	89fb      	ldrh	r3, [r7, #14]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	89fa      	ldrh	r2, [r7, #14]
 80039b6:	60da      	str	r2, [r3, #12]
 80039b8:	e05c      	b.n	8003a74 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	77bb      	strb	r3, [r7, #30]
 80039be:	e059      	b.n	8003a74 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039c0:	7ffb      	ldrb	r3, [r7, #31]
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d835      	bhi.n	8003a32 <UART_SetConfig+0x34a>
 80039c6:	a201      	add	r2, pc, #4	; (adr r2, 80039cc <UART_SetConfig+0x2e4>)
 80039c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039cc:	080039f1 	.word	0x080039f1
 80039d0:	080039f9 	.word	0x080039f9
 80039d4:	08003a1d 	.word	0x08003a1d
 80039d8:	08003a33 	.word	0x08003a33
 80039dc:	08003a23 	.word	0x08003a23
 80039e0:	08003a33 	.word	0x08003a33
 80039e4:	08003a33 	.word	0x08003a33
 80039e8:	08003a33 	.word	0x08003a33
 80039ec:	08003a2b 	.word	0x08003a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f0:	f7fe fff2 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 80039f4:	61b8      	str	r0, [r7, #24]
        break;
 80039f6:	e021      	b.n	8003a3c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039f8:	f7ff f810 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 80039fc:	61b8      	str	r0, [r7, #24]
        break;
 80039fe:	e01d      	b.n	8003a3c <UART_SetConfig+0x354>
 8003a00:	40013800 	.word	0x40013800
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40004400 	.word	0x40004400
 8003a0c:	40004800 	.word	0x40004800
 8003a10:	40004c00 	.word	0x40004c00
 8003a14:	40005000 	.word	0x40005000
 8003a18:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <UART_SetConfig+0x3a4>)
 8003a1e:	61bb      	str	r3, [r7, #24]
        break;
 8003a20:	e00c      	b.n	8003a3c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a22:	f7fe ff79 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8003a26:	61b8      	str	r0, [r7, #24]
        break;
 8003a28:	e008      	b.n	8003a3c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a2e:	61bb      	str	r3, [r7, #24]
        break;
 8003a30:	e004      	b.n	8003a3c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	77bb      	strb	r3, [r7, #30]
        break;
 8003a3a:	bf00      	nop
    }

    if (pclk != 0U)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d018      	beq.n	8003a74 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	085a      	lsrs	r2, r3, #1
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	441a      	add	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b0f      	cmp	r3, #15
 8003a5a:	d909      	bls.n	8003a70 <UART_SetConfig+0x388>
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a62:	d205      	bcs.n	8003a70 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	e001      	b.n	8003a74 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a80:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	007a1200 	.word	0x007a1200

08003a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01a      	beq.n	8003ba6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b8e:	d10a      	bne.n	8003ba6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
  }
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b098      	sub	sp, #96	; 0x60
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003be4:	f7fd f868 	bl	8000cb8 <HAL_GetTick>
 8003be8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d12e      	bne.n	8003c56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c00:	2200      	movs	r2, #0
 8003c02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f88c 	bl	8003d24 <UART_WaitOnFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d021      	beq.n	8003c56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1a:	e853 3f00 	ldrex	r3, [r3]
 8003c1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c26:	653b      	str	r3, [r7, #80]	; 0x50
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c30:	647b      	str	r3, [r7, #68]	; 0x44
 8003c32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c38:	e841 2300 	strex	r3, r2, [r1]
 8003c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e6      	bne.n	8003c12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2220      	movs	r2, #32
 8003c48:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e062      	b.n	8003d1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d149      	bne.n	8003cf8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f856 	bl	8003d24 <UART_WaitOnFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d03c      	beq.n	8003cf8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	623b      	str	r3, [r7, #32]
   return(result);
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e6      	bne.n	8003c7e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3308      	adds	r3, #8
 8003cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	e853 3f00 	ldrex	r3, [r3]
 8003cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3308      	adds	r3, #8
 8003cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cd0:	61fa      	str	r2, [r7, #28]
 8003cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	69b9      	ldr	r1, [r7, #24]
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e5      	bne.n	8003cb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e011      	b.n	8003d1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3758      	adds	r7, #88	; 0x58
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	4613      	mov	r3, r2
 8003d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d34:	e04f      	b.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d04b      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3e:	f7fc ffbb 	bl	8000cb8 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d302      	bcc.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e04e      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d037      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b80      	cmp	r3, #128	; 0x80
 8003d6a:	d034      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b40      	cmp	r3, #64	; 0x40
 8003d70:	d031      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d110      	bne.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2208      	movs	r2, #8
 8003d86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f838 	bl	8003dfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2208      	movs	r2, #8
 8003d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e029      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db0:	d111      	bne.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f81e 	bl	8003dfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e00f      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4013      	ands	r3, r2
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	bf0c      	ite	eq
 8003de6:	2301      	moveq	r3, #1
 8003de8:	2300      	movne	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d0a0      	beq.n	8003d36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b095      	sub	sp, #84	; 0x54
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e24:	643b      	str	r3, [r7, #64]	; 0x40
 8003e26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e2c:	e841 2300 	strex	r3, r2, [r1]
 8003e30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e6      	bne.n	8003e06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3308      	adds	r3, #8
 8003e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e5      	bne.n	8003e38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d118      	bne.n	8003ea6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f023 0310 	bic.w	r3, r3, #16
 8003e88:	647b      	str	r3, [r7, #68]	; 0x44
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	6979      	ldr	r1, [r7, #20]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e6      	bne.n	8003e74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003eba:	bf00      	nop
 8003ebc:	3754      	adds	r7, #84	; 0x54
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7ff fbe9 	bl	80036bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b088      	sub	sp, #32
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0e:	61fb      	str	r3, [r7, #28]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	6979      	ldr	r1, [r7, #20]
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	613b      	str	r3, [r7, #16]
   return(result);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e6      	bne.n	8003efa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff fbb5 	bl	80036a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f3e:	bf00      	nop
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <siprintf>:
 8003f5c:	b40e      	push	{r1, r2, r3}
 8003f5e:	b500      	push	{lr}
 8003f60:	b09c      	sub	sp, #112	; 0x70
 8003f62:	ab1d      	add	r3, sp, #116	; 0x74
 8003f64:	9002      	str	r0, [sp, #8]
 8003f66:	9006      	str	r0, [sp, #24]
 8003f68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f6c:	4809      	ldr	r0, [pc, #36]	; (8003f94 <siprintf+0x38>)
 8003f6e:	9107      	str	r1, [sp, #28]
 8003f70:	9104      	str	r1, [sp, #16]
 8003f72:	4909      	ldr	r1, [pc, #36]	; (8003f98 <siprintf+0x3c>)
 8003f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f78:	9105      	str	r1, [sp, #20]
 8003f7a:	6800      	ldr	r0, [r0, #0]
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	a902      	add	r1, sp, #8
 8003f80:	f000 f9a8 	bl	80042d4 <_svfiprintf_r>
 8003f84:	9b02      	ldr	r3, [sp, #8]
 8003f86:	2200      	movs	r2, #0
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	b01c      	add	sp, #112	; 0x70
 8003f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f90:	b003      	add	sp, #12
 8003f92:	4770      	bx	lr
 8003f94:	20000058 	.word	0x20000058
 8003f98:	ffff0208 	.word	0xffff0208

08003f9c <memset>:
 8003f9c:	4402      	add	r2, r0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d100      	bne.n	8003fa6 <memset+0xa>
 8003fa4:	4770      	bx	lr
 8003fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8003faa:	e7f9      	b.n	8003fa0 <memset+0x4>

08003fac <strstr>:
 8003fac:	780a      	ldrb	r2, [r1, #0]
 8003fae:	b570      	push	{r4, r5, r6, lr}
 8003fb0:	b96a      	cbnz	r2, 8003fce <strstr+0x22>
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d109      	bne.n	8003fcc <strstr+0x20>
 8003fb8:	460c      	mov	r4, r1
 8003fba:	4605      	mov	r5, r0
 8003fbc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f6      	beq.n	8003fb2 <strstr+0x6>
 8003fc4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003fc8:	429e      	cmp	r6, r3
 8003fca:	d0f7      	beq.n	8003fbc <strstr+0x10>
 8003fcc:	3001      	adds	r0, #1
 8003fce:	7803      	ldrb	r3, [r0, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1ef      	bne.n	8003fb4 <strstr+0x8>
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	e7ec      	b.n	8003fb2 <strstr+0x6>

08003fd8 <__errno>:
 8003fd8:	4b01      	ldr	r3, [pc, #4]	; (8003fe0 <__errno+0x8>)
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000058 	.word	0x20000058

08003fe4 <__libc_init_array>:
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	4d0d      	ldr	r5, [pc, #52]	; (800401c <__libc_init_array+0x38>)
 8003fe8:	4c0d      	ldr	r4, [pc, #52]	; (8004020 <__libc_init_array+0x3c>)
 8003fea:	1b64      	subs	r4, r4, r5
 8003fec:	10a4      	asrs	r4, r4, #2
 8003fee:	2600      	movs	r6, #0
 8003ff0:	42a6      	cmp	r6, r4
 8003ff2:	d109      	bne.n	8004008 <__libc_init_array+0x24>
 8003ff4:	4d0b      	ldr	r5, [pc, #44]	; (8004024 <__libc_init_array+0x40>)
 8003ff6:	4c0c      	ldr	r4, [pc, #48]	; (8004028 <__libc_init_array+0x44>)
 8003ff8:	f000 fc6a 	bl	80048d0 <_init>
 8003ffc:	1b64      	subs	r4, r4, r5
 8003ffe:	10a4      	asrs	r4, r4, #2
 8004000:	2600      	movs	r6, #0
 8004002:	42a6      	cmp	r6, r4
 8004004:	d105      	bne.n	8004012 <__libc_init_array+0x2e>
 8004006:	bd70      	pop	{r4, r5, r6, pc}
 8004008:	f855 3b04 	ldr.w	r3, [r5], #4
 800400c:	4798      	blx	r3
 800400e:	3601      	adds	r6, #1
 8004010:	e7ee      	b.n	8003ff0 <__libc_init_array+0xc>
 8004012:	f855 3b04 	ldr.w	r3, [r5], #4
 8004016:	4798      	blx	r3
 8004018:	3601      	adds	r6, #1
 800401a:	e7f2      	b.n	8004002 <__libc_init_array+0x1e>
 800401c:	080049e8 	.word	0x080049e8
 8004020:	080049e8 	.word	0x080049e8
 8004024:	080049e8 	.word	0x080049e8
 8004028:	080049ec 	.word	0x080049ec

0800402c <__retarget_lock_acquire_recursive>:
 800402c:	4770      	bx	lr

0800402e <__retarget_lock_release_recursive>:
 800402e:	4770      	bx	lr

08004030 <_free_r>:
 8004030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004032:	2900      	cmp	r1, #0
 8004034:	d044      	beq.n	80040c0 <_free_r+0x90>
 8004036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800403a:	9001      	str	r0, [sp, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f1a1 0404 	sub.w	r4, r1, #4
 8004042:	bfb8      	it	lt
 8004044:	18e4      	addlt	r4, r4, r3
 8004046:	f000 f8df 	bl	8004208 <__malloc_lock>
 800404a:	4a1e      	ldr	r2, [pc, #120]	; (80040c4 <_free_r+0x94>)
 800404c:	9801      	ldr	r0, [sp, #4]
 800404e:	6813      	ldr	r3, [r2, #0]
 8004050:	b933      	cbnz	r3, 8004060 <_free_r+0x30>
 8004052:	6063      	str	r3, [r4, #4]
 8004054:	6014      	str	r4, [r2, #0]
 8004056:	b003      	add	sp, #12
 8004058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800405c:	f000 b8da 	b.w	8004214 <__malloc_unlock>
 8004060:	42a3      	cmp	r3, r4
 8004062:	d908      	bls.n	8004076 <_free_r+0x46>
 8004064:	6825      	ldr	r5, [r4, #0]
 8004066:	1961      	adds	r1, r4, r5
 8004068:	428b      	cmp	r3, r1
 800406a:	bf01      	itttt	eq
 800406c:	6819      	ldreq	r1, [r3, #0]
 800406e:	685b      	ldreq	r3, [r3, #4]
 8004070:	1949      	addeq	r1, r1, r5
 8004072:	6021      	streq	r1, [r4, #0]
 8004074:	e7ed      	b.n	8004052 <_free_r+0x22>
 8004076:	461a      	mov	r2, r3
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	b10b      	cbz	r3, 8004080 <_free_r+0x50>
 800407c:	42a3      	cmp	r3, r4
 800407e:	d9fa      	bls.n	8004076 <_free_r+0x46>
 8004080:	6811      	ldr	r1, [r2, #0]
 8004082:	1855      	adds	r5, r2, r1
 8004084:	42a5      	cmp	r5, r4
 8004086:	d10b      	bne.n	80040a0 <_free_r+0x70>
 8004088:	6824      	ldr	r4, [r4, #0]
 800408a:	4421      	add	r1, r4
 800408c:	1854      	adds	r4, r2, r1
 800408e:	42a3      	cmp	r3, r4
 8004090:	6011      	str	r1, [r2, #0]
 8004092:	d1e0      	bne.n	8004056 <_free_r+0x26>
 8004094:	681c      	ldr	r4, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	6053      	str	r3, [r2, #4]
 800409a:	440c      	add	r4, r1
 800409c:	6014      	str	r4, [r2, #0]
 800409e:	e7da      	b.n	8004056 <_free_r+0x26>
 80040a0:	d902      	bls.n	80040a8 <_free_r+0x78>
 80040a2:	230c      	movs	r3, #12
 80040a4:	6003      	str	r3, [r0, #0]
 80040a6:	e7d6      	b.n	8004056 <_free_r+0x26>
 80040a8:	6825      	ldr	r5, [r4, #0]
 80040aa:	1961      	adds	r1, r4, r5
 80040ac:	428b      	cmp	r3, r1
 80040ae:	bf04      	itt	eq
 80040b0:	6819      	ldreq	r1, [r3, #0]
 80040b2:	685b      	ldreq	r3, [r3, #4]
 80040b4:	6063      	str	r3, [r4, #4]
 80040b6:	bf04      	itt	eq
 80040b8:	1949      	addeq	r1, r1, r5
 80040ba:	6021      	streq	r1, [r4, #0]
 80040bc:	6054      	str	r4, [r2, #4]
 80040be:	e7ca      	b.n	8004056 <_free_r+0x26>
 80040c0:	b003      	add	sp, #12
 80040c2:	bd30      	pop	{r4, r5, pc}
 80040c4:	20000370 	.word	0x20000370

080040c8 <sbrk_aligned>:
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	4e0e      	ldr	r6, [pc, #56]	; (8004104 <sbrk_aligned+0x3c>)
 80040cc:	460c      	mov	r4, r1
 80040ce:	6831      	ldr	r1, [r6, #0]
 80040d0:	4605      	mov	r5, r0
 80040d2:	b911      	cbnz	r1, 80040da <sbrk_aligned+0x12>
 80040d4:	f000 fba6 	bl	8004824 <_sbrk_r>
 80040d8:	6030      	str	r0, [r6, #0]
 80040da:	4621      	mov	r1, r4
 80040dc:	4628      	mov	r0, r5
 80040de:	f000 fba1 	bl	8004824 <_sbrk_r>
 80040e2:	1c43      	adds	r3, r0, #1
 80040e4:	d00a      	beq.n	80040fc <sbrk_aligned+0x34>
 80040e6:	1cc4      	adds	r4, r0, #3
 80040e8:	f024 0403 	bic.w	r4, r4, #3
 80040ec:	42a0      	cmp	r0, r4
 80040ee:	d007      	beq.n	8004100 <sbrk_aligned+0x38>
 80040f0:	1a21      	subs	r1, r4, r0
 80040f2:	4628      	mov	r0, r5
 80040f4:	f000 fb96 	bl	8004824 <_sbrk_r>
 80040f8:	3001      	adds	r0, #1
 80040fa:	d101      	bne.n	8004100 <sbrk_aligned+0x38>
 80040fc:	f04f 34ff 	mov.w	r4, #4294967295
 8004100:	4620      	mov	r0, r4
 8004102:	bd70      	pop	{r4, r5, r6, pc}
 8004104:	20000374 	.word	0x20000374

08004108 <_malloc_r>:
 8004108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800410c:	1ccd      	adds	r5, r1, #3
 800410e:	f025 0503 	bic.w	r5, r5, #3
 8004112:	3508      	adds	r5, #8
 8004114:	2d0c      	cmp	r5, #12
 8004116:	bf38      	it	cc
 8004118:	250c      	movcc	r5, #12
 800411a:	2d00      	cmp	r5, #0
 800411c:	4607      	mov	r7, r0
 800411e:	db01      	blt.n	8004124 <_malloc_r+0x1c>
 8004120:	42a9      	cmp	r1, r5
 8004122:	d905      	bls.n	8004130 <_malloc_r+0x28>
 8004124:	230c      	movs	r3, #12
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	2600      	movs	r6, #0
 800412a:	4630      	mov	r0, r6
 800412c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004130:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004204 <_malloc_r+0xfc>
 8004134:	f000 f868 	bl	8004208 <__malloc_lock>
 8004138:	f8d8 3000 	ldr.w	r3, [r8]
 800413c:	461c      	mov	r4, r3
 800413e:	bb5c      	cbnz	r4, 8004198 <_malloc_r+0x90>
 8004140:	4629      	mov	r1, r5
 8004142:	4638      	mov	r0, r7
 8004144:	f7ff ffc0 	bl	80040c8 <sbrk_aligned>
 8004148:	1c43      	adds	r3, r0, #1
 800414a:	4604      	mov	r4, r0
 800414c:	d155      	bne.n	80041fa <_malloc_r+0xf2>
 800414e:	f8d8 4000 	ldr.w	r4, [r8]
 8004152:	4626      	mov	r6, r4
 8004154:	2e00      	cmp	r6, #0
 8004156:	d145      	bne.n	80041e4 <_malloc_r+0xdc>
 8004158:	2c00      	cmp	r4, #0
 800415a:	d048      	beq.n	80041ee <_malloc_r+0xe6>
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	4631      	mov	r1, r6
 8004160:	4638      	mov	r0, r7
 8004162:	eb04 0903 	add.w	r9, r4, r3
 8004166:	f000 fb5d 	bl	8004824 <_sbrk_r>
 800416a:	4581      	cmp	r9, r0
 800416c:	d13f      	bne.n	80041ee <_malloc_r+0xe6>
 800416e:	6821      	ldr	r1, [r4, #0]
 8004170:	1a6d      	subs	r5, r5, r1
 8004172:	4629      	mov	r1, r5
 8004174:	4638      	mov	r0, r7
 8004176:	f7ff ffa7 	bl	80040c8 <sbrk_aligned>
 800417a:	3001      	adds	r0, #1
 800417c:	d037      	beq.n	80041ee <_malloc_r+0xe6>
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	442b      	add	r3, r5
 8004182:	6023      	str	r3, [r4, #0]
 8004184:	f8d8 3000 	ldr.w	r3, [r8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d038      	beq.n	80041fe <_malloc_r+0xf6>
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	42a2      	cmp	r2, r4
 8004190:	d12b      	bne.n	80041ea <_malloc_r+0xe2>
 8004192:	2200      	movs	r2, #0
 8004194:	605a      	str	r2, [r3, #4]
 8004196:	e00f      	b.n	80041b8 <_malloc_r+0xb0>
 8004198:	6822      	ldr	r2, [r4, #0]
 800419a:	1b52      	subs	r2, r2, r5
 800419c:	d41f      	bmi.n	80041de <_malloc_r+0xd6>
 800419e:	2a0b      	cmp	r2, #11
 80041a0:	d917      	bls.n	80041d2 <_malloc_r+0xca>
 80041a2:	1961      	adds	r1, r4, r5
 80041a4:	42a3      	cmp	r3, r4
 80041a6:	6025      	str	r5, [r4, #0]
 80041a8:	bf18      	it	ne
 80041aa:	6059      	strne	r1, [r3, #4]
 80041ac:	6863      	ldr	r3, [r4, #4]
 80041ae:	bf08      	it	eq
 80041b0:	f8c8 1000 	streq.w	r1, [r8]
 80041b4:	5162      	str	r2, [r4, r5]
 80041b6:	604b      	str	r3, [r1, #4]
 80041b8:	4638      	mov	r0, r7
 80041ba:	f104 060b 	add.w	r6, r4, #11
 80041be:	f000 f829 	bl	8004214 <__malloc_unlock>
 80041c2:	f026 0607 	bic.w	r6, r6, #7
 80041c6:	1d23      	adds	r3, r4, #4
 80041c8:	1af2      	subs	r2, r6, r3
 80041ca:	d0ae      	beq.n	800412a <_malloc_r+0x22>
 80041cc:	1b9b      	subs	r3, r3, r6
 80041ce:	50a3      	str	r3, [r4, r2]
 80041d0:	e7ab      	b.n	800412a <_malloc_r+0x22>
 80041d2:	42a3      	cmp	r3, r4
 80041d4:	6862      	ldr	r2, [r4, #4]
 80041d6:	d1dd      	bne.n	8004194 <_malloc_r+0x8c>
 80041d8:	f8c8 2000 	str.w	r2, [r8]
 80041dc:	e7ec      	b.n	80041b8 <_malloc_r+0xb0>
 80041de:	4623      	mov	r3, r4
 80041e0:	6864      	ldr	r4, [r4, #4]
 80041e2:	e7ac      	b.n	800413e <_malloc_r+0x36>
 80041e4:	4634      	mov	r4, r6
 80041e6:	6876      	ldr	r6, [r6, #4]
 80041e8:	e7b4      	b.n	8004154 <_malloc_r+0x4c>
 80041ea:	4613      	mov	r3, r2
 80041ec:	e7cc      	b.n	8004188 <_malloc_r+0x80>
 80041ee:	230c      	movs	r3, #12
 80041f0:	603b      	str	r3, [r7, #0]
 80041f2:	4638      	mov	r0, r7
 80041f4:	f000 f80e 	bl	8004214 <__malloc_unlock>
 80041f8:	e797      	b.n	800412a <_malloc_r+0x22>
 80041fa:	6025      	str	r5, [r4, #0]
 80041fc:	e7dc      	b.n	80041b8 <_malloc_r+0xb0>
 80041fe:	605b      	str	r3, [r3, #4]
 8004200:	deff      	udf	#255	; 0xff
 8004202:	bf00      	nop
 8004204:	20000370 	.word	0x20000370

08004208 <__malloc_lock>:
 8004208:	4801      	ldr	r0, [pc, #4]	; (8004210 <__malloc_lock+0x8>)
 800420a:	f7ff bf0f 	b.w	800402c <__retarget_lock_acquire_recursive>
 800420e:	bf00      	nop
 8004210:	2000036c 	.word	0x2000036c

08004214 <__malloc_unlock>:
 8004214:	4801      	ldr	r0, [pc, #4]	; (800421c <__malloc_unlock+0x8>)
 8004216:	f7ff bf0a 	b.w	800402e <__retarget_lock_release_recursive>
 800421a:	bf00      	nop
 800421c:	2000036c 	.word	0x2000036c

08004220 <__ssputs_r>:
 8004220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004224:	688e      	ldr	r6, [r1, #8]
 8004226:	461f      	mov	r7, r3
 8004228:	42be      	cmp	r6, r7
 800422a:	680b      	ldr	r3, [r1, #0]
 800422c:	4682      	mov	sl, r0
 800422e:	460c      	mov	r4, r1
 8004230:	4690      	mov	r8, r2
 8004232:	d82c      	bhi.n	800428e <__ssputs_r+0x6e>
 8004234:	898a      	ldrh	r2, [r1, #12]
 8004236:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800423a:	d026      	beq.n	800428a <__ssputs_r+0x6a>
 800423c:	6965      	ldr	r5, [r4, #20]
 800423e:	6909      	ldr	r1, [r1, #16]
 8004240:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004244:	eba3 0901 	sub.w	r9, r3, r1
 8004248:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800424c:	1c7b      	adds	r3, r7, #1
 800424e:	444b      	add	r3, r9
 8004250:	106d      	asrs	r5, r5, #1
 8004252:	429d      	cmp	r5, r3
 8004254:	bf38      	it	cc
 8004256:	461d      	movcc	r5, r3
 8004258:	0553      	lsls	r3, r2, #21
 800425a:	d527      	bpl.n	80042ac <__ssputs_r+0x8c>
 800425c:	4629      	mov	r1, r5
 800425e:	f7ff ff53 	bl	8004108 <_malloc_r>
 8004262:	4606      	mov	r6, r0
 8004264:	b360      	cbz	r0, 80042c0 <__ssputs_r+0xa0>
 8004266:	6921      	ldr	r1, [r4, #16]
 8004268:	464a      	mov	r2, r9
 800426a:	f000 faeb 	bl	8004844 <memcpy>
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004278:	81a3      	strh	r3, [r4, #12]
 800427a:	6126      	str	r6, [r4, #16]
 800427c:	6165      	str	r5, [r4, #20]
 800427e:	444e      	add	r6, r9
 8004280:	eba5 0509 	sub.w	r5, r5, r9
 8004284:	6026      	str	r6, [r4, #0]
 8004286:	60a5      	str	r5, [r4, #8]
 8004288:	463e      	mov	r6, r7
 800428a:	42be      	cmp	r6, r7
 800428c:	d900      	bls.n	8004290 <__ssputs_r+0x70>
 800428e:	463e      	mov	r6, r7
 8004290:	6820      	ldr	r0, [r4, #0]
 8004292:	4632      	mov	r2, r6
 8004294:	4641      	mov	r1, r8
 8004296:	f000 faab 	bl	80047f0 <memmove>
 800429a:	68a3      	ldr	r3, [r4, #8]
 800429c:	1b9b      	subs	r3, r3, r6
 800429e:	60a3      	str	r3, [r4, #8]
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	4433      	add	r3, r6
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	2000      	movs	r0, #0
 80042a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ac:	462a      	mov	r2, r5
 80042ae:	f000 fad7 	bl	8004860 <_realloc_r>
 80042b2:	4606      	mov	r6, r0
 80042b4:	2800      	cmp	r0, #0
 80042b6:	d1e0      	bne.n	800427a <__ssputs_r+0x5a>
 80042b8:	6921      	ldr	r1, [r4, #16]
 80042ba:	4650      	mov	r0, sl
 80042bc:	f7ff feb8 	bl	8004030 <_free_r>
 80042c0:	230c      	movs	r3, #12
 80042c2:	f8ca 3000 	str.w	r3, [sl]
 80042c6:	89a3      	ldrh	r3, [r4, #12]
 80042c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042cc:	81a3      	strh	r3, [r4, #12]
 80042ce:	f04f 30ff 	mov.w	r0, #4294967295
 80042d2:	e7e9      	b.n	80042a8 <__ssputs_r+0x88>

080042d4 <_svfiprintf_r>:
 80042d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d8:	4698      	mov	r8, r3
 80042da:	898b      	ldrh	r3, [r1, #12]
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	b09d      	sub	sp, #116	; 0x74
 80042e0:	4607      	mov	r7, r0
 80042e2:	460d      	mov	r5, r1
 80042e4:	4614      	mov	r4, r2
 80042e6:	d50e      	bpl.n	8004306 <_svfiprintf_r+0x32>
 80042e8:	690b      	ldr	r3, [r1, #16]
 80042ea:	b963      	cbnz	r3, 8004306 <_svfiprintf_r+0x32>
 80042ec:	2140      	movs	r1, #64	; 0x40
 80042ee:	f7ff ff0b 	bl	8004108 <_malloc_r>
 80042f2:	6028      	str	r0, [r5, #0]
 80042f4:	6128      	str	r0, [r5, #16]
 80042f6:	b920      	cbnz	r0, 8004302 <_svfiprintf_r+0x2e>
 80042f8:	230c      	movs	r3, #12
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004300:	e0d0      	b.n	80044a4 <_svfiprintf_r+0x1d0>
 8004302:	2340      	movs	r3, #64	; 0x40
 8004304:	616b      	str	r3, [r5, #20]
 8004306:	2300      	movs	r3, #0
 8004308:	9309      	str	r3, [sp, #36]	; 0x24
 800430a:	2320      	movs	r3, #32
 800430c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004310:	f8cd 800c 	str.w	r8, [sp, #12]
 8004314:	2330      	movs	r3, #48	; 0x30
 8004316:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80044bc <_svfiprintf_r+0x1e8>
 800431a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800431e:	f04f 0901 	mov.w	r9, #1
 8004322:	4623      	mov	r3, r4
 8004324:	469a      	mov	sl, r3
 8004326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800432a:	b10a      	cbz	r2, 8004330 <_svfiprintf_r+0x5c>
 800432c:	2a25      	cmp	r2, #37	; 0x25
 800432e:	d1f9      	bne.n	8004324 <_svfiprintf_r+0x50>
 8004330:	ebba 0b04 	subs.w	fp, sl, r4
 8004334:	d00b      	beq.n	800434e <_svfiprintf_r+0x7a>
 8004336:	465b      	mov	r3, fp
 8004338:	4622      	mov	r2, r4
 800433a:	4629      	mov	r1, r5
 800433c:	4638      	mov	r0, r7
 800433e:	f7ff ff6f 	bl	8004220 <__ssputs_r>
 8004342:	3001      	adds	r0, #1
 8004344:	f000 80a9 	beq.w	800449a <_svfiprintf_r+0x1c6>
 8004348:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800434a:	445a      	add	r2, fp
 800434c:	9209      	str	r2, [sp, #36]	; 0x24
 800434e:	f89a 3000 	ldrb.w	r3, [sl]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80a1 	beq.w	800449a <_svfiprintf_r+0x1c6>
 8004358:	2300      	movs	r3, #0
 800435a:	f04f 32ff 	mov.w	r2, #4294967295
 800435e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004362:	f10a 0a01 	add.w	sl, sl, #1
 8004366:	9304      	str	r3, [sp, #16]
 8004368:	9307      	str	r3, [sp, #28]
 800436a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800436e:	931a      	str	r3, [sp, #104]	; 0x68
 8004370:	4654      	mov	r4, sl
 8004372:	2205      	movs	r2, #5
 8004374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004378:	4850      	ldr	r0, [pc, #320]	; (80044bc <_svfiprintf_r+0x1e8>)
 800437a:	f7fb ff31 	bl	80001e0 <memchr>
 800437e:	9a04      	ldr	r2, [sp, #16]
 8004380:	b9d8      	cbnz	r0, 80043ba <_svfiprintf_r+0xe6>
 8004382:	06d0      	lsls	r0, r2, #27
 8004384:	bf44      	itt	mi
 8004386:	2320      	movmi	r3, #32
 8004388:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800438c:	0711      	lsls	r1, r2, #28
 800438e:	bf44      	itt	mi
 8004390:	232b      	movmi	r3, #43	; 0x2b
 8004392:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004396:	f89a 3000 	ldrb.w	r3, [sl]
 800439a:	2b2a      	cmp	r3, #42	; 0x2a
 800439c:	d015      	beq.n	80043ca <_svfiprintf_r+0xf6>
 800439e:	9a07      	ldr	r2, [sp, #28]
 80043a0:	4654      	mov	r4, sl
 80043a2:	2000      	movs	r0, #0
 80043a4:	f04f 0c0a 	mov.w	ip, #10
 80043a8:	4621      	mov	r1, r4
 80043aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043ae:	3b30      	subs	r3, #48	; 0x30
 80043b0:	2b09      	cmp	r3, #9
 80043b2:	d94d      	bls.n	8004450 <_svfiprintf_r+0x17c>
 80043b4:	b1b0      	cbz	r0, 80043e4 <_svfiprintf_r+0x110>
 80043b6:	9207      	str	r2, [sp, #28]
 80043b8:	e014      	b.n	80043e4 <_svfiprintf_r+0x110>
 80043ba:	eba0 0308 	sub.w	r3, r0, r8
 80043be:	fa09 f303 	lsl.w	r3, r9, r3
 80043c2:	4313      	orrs	r3, r2
 80043c4:	9304      	str	r3, [sp, #16]
 80043c6:	46a2      	mov	sl, r4
 80043c8:	e7d2      	b.n	8004370 <_svfiprintf_r+0x9c>
 80043ca:	9b03      	ldr	r3, [sp, #12]
 80043cc:	1d19      	adds	r1, r3, #4
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	9103      	str	r1, [sp, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bfbb      	ittet	lt
 80043d6:	425b      	neglt	r3, r3
 80043d8:	f042 0202 	orrlt.w	r2, r2, #2
 80043dc:	9307      	strge	r3, [sp, #28]
 80043de:	9307      	strlt	r3, [sp, #28]
 80043e0:	bfb8      	it	lt
 80043e2:	9204      	strlt	r2, [sp, #16]
 80043e4:	7823      	ldrb	r3, [r4, #0]
 80043e6:	2b2e      	cmp	r3, #46	; 0x2e
 80043e8:	d10c      	bne.n	8004404 <_svfiprintf_r+0x130>
 80043ea:	7863      	ldrb	r3, [r4, #1]
 80043ec:	2b2a      	cmp	r3, #42	; 0x2a
 80043ee:	d134      	bne.n	800445a <_svfiprintf_r+0x186>
 80043f0:	9b03      	ldr	r3, [sp, #12]
 80043f2:	1d1a      	adds	r2, r3, #4
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	9203      	str	r2, [sp, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	bfb8      	it	lt
 80043fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004400:	3402      	adds	r4, #2
 8004402:	9305      	str	r3, [sp, #20]
 8004404:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80044cc <_svfiprintf_r+0x1f8>
 8004408:	7821      	ldrb	r1, [r4, #0]
 800440a:	2203      	movs	r2, #3
 800440c:	4650      	mov	r0, sl
 800440e:	f7fb fee7 	bl	80001e0 <memchr>
 8004412:	b138      	cbz	r0, 8004424 <_svfiprintf_r+0x150>
 8004414:	9b04      	ldr	r3, [sp, #16]
 8004416:	eba0 000a 	sub.w	r0, r0, sl
 800441a:	2240      	movs	r2, #64	; 0x40
 800441c:	4082      	lsls	r2, r0
 800441e:	4313      	orrs	r3, r2
 8004420:	3401      	adds	r4, #1
 8004422:	9304      	str	r3, [sp, #16]
 8004424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004428:	4825      	ldr	r0, [pc, #148]	; (80044c0 <_svfiprintf_r+0x1ec>)
 800442a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800442e:	2206      	movs	r2, #6
 8004430:	f7fb fed6 	bl	80001e0 <memchr>
 8004434:	2800      	cmp	r0, #0
 8004436:	d038      	beq.n	80044aa <_svfiprintf_r+0x1d6>
 8004438:	4b22      	ldr	r3, [pc, #136]	; (80044c4 <_svfiprintf_r+0x1f0>)
 800443a:	bb1b      	cbnz	r3, 8004484 <_svfiprintf_r+0x1b0>
 800443c:	9b03      	ldr	r3, [sp, #12]
 800443e:	3307      	adds	r3, #7
 8004440:	f023 0307 	bic.w	r3, r3, #7
 8004444:	3308      	adds	r3, #8
 8004446:	9303      	str	r3, [sp, #12]
 8004448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800444a:	4433      	add	r3, r6
 800444c:	9309      	str	r3, [sp, #36]	; 0x24
 800444e:	e768      	b.n	8004322 <_svfiprintf_r+0x4e>
 8004450:	fb0c 3202 	mla	r2, ip, r2, r3
 8004454:	460c      	mov	r4, r1
 8004456:	2001      	movs	r0, #1
 8004458:	e7a6      	b.n	80043a8 <_svfiprintf_r+0xd4>
 800445a:	2300      	movs	r3, #0
 800445c:	3401      	adds	r4, #1
 800445e:	9305      	str	r3, [sp, #20]
 8004460:	4619      	mov	r1, r3
 8004462:	f04f 0c0a 	mov.w	ip, #10
 8004466:	4620      	mov	r0, r4
 8004468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800446c:	3a30      	subs	r2, #48	; 0x30
 800446e:	2a09      	cmp	r2, #9
 8004470:	d903      	bls.n	800447a <_svfiprintf_r+0x1a6>
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0c6      	beq.n	8004404 <_svfiprintf_r+0x130>
 8004476:	9105      	str	r1, [sp, #20]
 8004478:	e7c4      	b.n	8004404 <_svfiprintf_r+0x130>
 800447a:	fb0c 2101 	mla	r1, ip, r1, r2
 800447e:	4604      	mov	r4, r0
 8004480:	2301      	movs	r3, #1
 8004482:	e7f0      	b.n	8004466 <_svfiprintf_r+0x192>
 8004484:	ab03      	add	r3, sp, #12
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	462a      	mov	r2, r5
 800448a:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <_svfiprintf_r+0x1f4>)
 800448c:	a904      	add	r1, sp, #16
 800448e:	4638      	mov	r0, r7
 8004490:	f3af 8000 	nop.w
 8004494:	1c42      	adds	r2, r0, #1
 8004496:	4606      	mov	r6, r0
 8004498:	d1d6      	bne.n	8004448 <_svfiprintf_r+0x174>
 800449a:	89ab      	ldrh	r3, [r5, #12]
 800449c:	065b      	lsls	r3, r3, #25
 800449e:	f53f af2d 	bmi.w	80042fc <_svfiprintf_r+0x28>
 80044a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044a4:	b01d      	add	sp, #116	; 0x74
 80044a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044aa:	ab03      	add	r3, sp, #12
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	462a      	mov	r2, r5
 80044b0:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <_svfiprintf_r+0x1f4>)
 80044b2:	a904      	add	r1, sp, #16
 80044b4:	4638      	mov	r0, r7
 80044b6:	f000 f879 	bl	80045ac <_printf_i>
 80044ba:	e7eb      	b.n	8004494 <_svfiprintf_r+0x1c0>
 80044bc:	080049b4 	.word	0x080049b4
 80044c0:	080049be 	.word	0x080049be
 80044c4:	00000000 	.word	0x00000000
 80044c8:	08004221 	.word	0x08004221
 80044cc:	080049ba 	.word	0x080049ba

080044d0 <_printf_common>:
 80044d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d4:	4616      	mov	r6, r2
 80044d6:	4699      	mov	r9, r3
 80044d8:	688a      	ldr	r2, [r1, #8]
 80044da:	690b      	ldr	r3, [r1, #16]
 80044dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044e0:	4293      	cmp	r3, r2
 80044e2:	bfb8      	it	lt
 80044e4:	4613      	movlt	r3, r2
 80044e6:	6033      	str	r3, [r6, #0]
 80044e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044ec:	4607      	mov	r7, r0
 80044ee:	460c      	mov	r4, r1
 80044f0:	b10a      	cbz	r2, 80044f6 <_printf_common+0x26>
 80044f2:	3301      	adds	r3, #1
 80044f4:	6033      	str	r3, [r6, #0]
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	0699      	lsls	r1, r3, #26
 80044fa:	bf42      	ittt	mi
 80044fc:	6833      	ldrmi	r3, [r6, #0]
 80044fe:	3302      	addmi	r3, #2
 8004500:	6033      	strmi	r3, [r6, #0]
 8004502:	6825      	ldr	r5, [r4, #0]
 8004504:	f015 0506 	ands.w	r5, r5, #6
 8004508:	d106      	bne.n	8004518 <_printf_common+0x48>
 800450a:	f104 0a19 	add.w	sl, r4, #25
 800450e:	68e3      	ldr	r3, [r4, #12]
 8004510:	6832      	ldr	r2, [r6, #0]
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	42ab      	cmp	r3, r5
 8004516:	dc26      	bgt.n	8004566 <_printf_common+0x96>
 8004518:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800451c:	1e13      	subs	r3, r2, #0
 800451e:	6822      	ldr	r2, [r4, #0]
 8004520:	bf18      	it	ne
 8004522:	2301      	movne	r3, #1
 8004524:	0692      	lsls	r2, r2, #26
 8004526:	d42b      	bmi.n	8004580 <_printf_common+0xb0>
 8004528:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800452c:	4649      	mov	r1, r9
 800452e:	4638      	mov	r0, r7
 8004530:	47c0      	blx	r8
 8004532:	3001      	adds	r0, #1
 8004534:	d01e      	beq.n	8004574 <_printf_common+0xa4>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	6922      	ldr	r2, [r4, #16]
 800453a:	f003 0306 	and.w	r3, r3, #6
 800453e:	2b04      	cmp	r3, #4
 8004540:	bf02      	ittt	eq
 8004542:	68e5      	ldreq	r5, [r4, #12]
 8004544:	6833      	ldreq	r3, [r6, #0]
 8004546:	1aed      	subeq	r5, r5, r3
 8004548:	68a3      	ldr	r3, [r4, #8]
 800454a:	bf0c      	ite	eq
 800454c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004550:	2500      	movne	r5, #0
 8004552:	4293      	cmp	r3, r2
 8004554:	bfc4      	itt	gt
 8004556:	1a9b      	subgt	r3, r3, r2
 8004558:	18ed      	addgt	r5, r5, r3
 800455a:	2600      	movs	r6, #0
 800455c:	341a      	adds	r4, #26
 800455e:	42b5      	cmp	r5, r6
 8004560:	d11a      	bne.n	8004598 <_printf_common+0xc8>
 8004562:	2000      	movs	r0, #0
 8004564:	e008      	b.n	8004578 <_printf_common+0xa8>
 8004566:	2301      	movs	r3, #1
 8004568:	4652      	mov	r2, sl
 800456a:	4649      	mov	r1, r9
 800456c:	4638      	mov	r0, r7
 800456e:	47c0      	blx	r8
 8004570:	3001      	adds	r0, #1
 8004572:	d103      	bne.n	800457c <_printf_common+0xac>
 8004574:	f04f 30ff 	mov.w	r0, #4294967295
 8004578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457c:	3501      	adds	r5, #1
 800457e:	e7c6      	b.n	800450e <_printf_common+0x3e>
 8004580:	18e1      	adds	r1, r4, r3
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	2030      	movs	r0, #48	; 0x30
 8004586:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800458a:	4422      	add	r2, r4
 800458c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004590:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004594:	3302      	adds	r3, #2
 8004596:	e7c7      	b.n	8004528 <_printf_common+0x58>
 8004598:	2301      	movs	r3, #1
 800459a:	4622      	mov	r2, r4
 800459c:	4649      	mov	r1, r9
 800459e:	4638      	mov	r0, r7
 80045a0:	47c0      	blx	r8
 80045a2:	3001      	adds	r0, #1
 80045a4:	d0e6      	beq.n	8004574 <_printf_common+0xa4>
 80045a6:	3601      	adds	r6, #1
 80045a8:	e7d9      	b.n	800455e <_printf_common+0x8e>
	...

080045ac <_printf_i>:
 80045ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045b0:	7e0f      	ldrb	r7, [r1, #24]
 80045b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045b4:	2f78      	cmp	r7, #120	; 0x78
 80045b6:	4691      	mov	r9, r2
 80045b8:	4680      	mov	r8, r0
 80045ba:	460c      	mov	r4, r1
 80045bc:	469a      	mov	sl, r3
 80045be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045c2:	d807      	bhi.n	80045d4 <_printf_i+0x28>
 80045c4:	2f62      	cmp	r7, #98	; 0x62
 80045c6:	d80a      	bhi.n	80045de <_printf_i+0x32>
 80045c8:	2f00      	cmp	r7, #0
 80045ca:	f000 80d4 	beq.w	8004776 <_printf_i+0x1ca>
 80045ce:	2f58      	cmp	r7, #88	; 0x58
 80045d0:	f000 80c0 	beq.w	8004754 <_printf_i+0x1a8>
 80045d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045dc:	e03a      	b.n	8004654 <_printf_i+0xa8>
 80045de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045e2:	2b15      	cmp	r3, #21
 80045e4:	d8f6      	bhi.n	80045d4 <_printf_i+0x28>
 80045e6:	a101      	add	r1, pc, #4	; (adr r1, 80045ec <_printf_i+0x40>)
 80045e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045ec:	08004645 	.word	0x08004645
 80045f0:	08004659 	.word	0x08004659
 80045f4:	080045d5 	.word	0x080045d5
 80045f8:	080045d5 	.word	0x080045d5
 80045fc:	080045d5 	.word	0x080045d5
 8004600:	080045d5 	.word	0x080045d5
 8004604:	08004659 	.word	0x08004659
 8004608:	080045d5 	.word	0x080045d5
 800460c:	080045d5 	.word	0x080045d5
 8004610:	080045d5 	.word	0x080045d5
 8004614:	080045d5 	.word	0x080045d5
 8004618:	0800475d 	.word	0x0800475d
 800461c:	08004685 	.word	0x08004685
 8004620:	08004717 	.word	0x08004717
 8004624:	080045d5 	.word	0x080045d5
 8004628:	080045d5 	.word	0x080045d5
 800462c:	0800477f 	.word	0x0800477f
 8004630:	080045d5 	.word	0x080045d5
 8004634:	08004685 	.word	0x08004685
 8004638:	080045d5 	.word	0x080045d5
 800463c:	080045d5 	.word	0x080045d5
 8004640:	0800471f 	.word	0x0800471f
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	1d1a      	adds	r2, r3, #4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	602a      	str	r2, [r5, #0]
 800464c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004654:	2301      	movs	r3, #1
 8004656:	e09f      	b.n	8004798 <_printf_i+0x1ec>
 8004658:	6820      	ldr	r0, [r4, #0]
 800465a:	682b      	ldr	r3, [r5, #0]
 800465c:	0607      	lsls	r7, r0, #24
 800465e:	f103 0104 	add.w	r1, r3, #4
 8004662:	6029      	str	r1, [r5, #0]
 8004664:	d501      	bpl.n	800466a <_printf_i+0xbe>
 8004666:	681e      	ldr	r6, [r3, #0]
 8004668:	e003      	b.n	8004672 <_printf_i+0xc6>
 800466a:	0646      	lsls	r6, r0, #25
 800466c:	d5fb      	bpl.n	8004666 <_printf_i+0xba>
 800466e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004672:	2e00      	cmp	r6, #0
 8004674:	da03      	bge.n	800467e <_printf_i+0xd2>
 8004676:	232d      	movs	r3, #45	; 0x2d
 8004678:	4276      	negs	r6, r6
 800467a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800467e:	485a      	ldr	r0, [pc, #360]	; (80047e8 <_printf_i+0x23c>)
 8004680:	230a      	movs	r3, #10
 8004682:	e012      	b.n	80046aa <_printf_i+0xfe>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	6820      	ldr	r0, [r4, #0]
 8004688:	1d19      	adds	r1, r3, #4
 800468a:	6029      	str	r1, [r5, #0]
 800468c:	0605      	lsls	r5, r0, #24
 800468e:	d501      	bpl.n	8004694 <_printf_i+0xe8>
 8004690:	681e      	ldr	r6, [r3, #0]
 8004692:	e002      	b.n	800469a <_printf_i+0xee>
 8004694:	0641      	lsls	r1, r0, #25
 8004696:	d5fb      	bpl.n	8004690 <_printf_i+0xe4>
 8004698:	881e      	ldrh	r6, [r3, #0]
 800469a:	4853      	ldr	r0, [pc, #332]	; (80047e8 <_printf_i+0x23c>)
 800469c:	2f6f      	cmp	r7, #111	; 0x6f
 800469e:	bf0c      	ite	eq
 80046a0:	2308      	moveq	r3, #8
 80046a2:	230a      	movne	r3, #10
 80046a4:	2100      	movs	r1, #0
 80046a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046aa:	6865      	ldr	r5, [r4, #4]
 80046ac:	60a5      	str	r5, [r4, #8]
 80046ae:	2d00      	cmp	r5, #0
 80046b0:	bfa2      	ittt	ge
 80046b2:	6821      	ldrge	r1, [r4, #0]
 80046b4:	f021 0104 	bicge.w	r1, r1, #4
 80046b8:	6021      	strge	r1, [r4, #0]
 80046ba:	b90e      	cbnz	r6, 80046c0 <_printf_i+0x114>
 80046bc:	2d00      	cmp	r5, #0
 80046be:	d04b      	beq.n	8004758 <_printf_i+0x1ac>
 80046c0:	4615      	mov	r5, r2
 80046c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80046c6:	fb03 6711 	mls	r7, r3, r1, r6
 80046ca:	5dc7      	ldrb	r7, [r0, r7]
 80046cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046d0:	4637      	mov	r7, r6
 80046d2:	42bb      	cmp	r3, r7
 80046d4:	460e      	mov	r6, r1
 80046d6:	d9f4      	bls.n	80046c2 <_printf_i+0x116>
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d10b      	bne.n	80046f4 <_printf_i+0x148>
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	07de      	lsls	r6, r3, #31
 80046e0:	d508      	bpl.n	80046f4 <_printf_i+0x148>
 80046e2:	6923      	ldr	r3, [r4, #16]
 80046e4:	6861      	ldr	r1, [r4, #4]
 80046e6:	4299      	cmp	r1, r3
 80046e8:	bfde      	ittt	le
 80046ea:	2330      	movle	r3, #48	; 0x30
 80046ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046f4:	1b52      	subs	r2, r2, r5
 80046f6:	6122      	str	r2, [r4, #16]
 80046f8:	f8cd a000 	str.w	sl, [sp]
 80046fc:	464b      	mov	r3, r9
 80046fe:	aa03      	add	r2, sp, #12
 8004700:	4621      	mov	r1, r4
 8004702:	4640      	mov	r0, r8
 8004704:	f7ff fee4 	bl	80044d0 <_printf_common>
 8004708:	3001      	adds	r0, #1
 800470a:	d14a      	bne.n	80047a2 <_printf_i+0x1f6>
 800470c:	f04f 30ff 	mov.w	r0, #4294967295
 8004710:	b004      	add	sp, #16
 8004712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	f043 0320 	orr.w	r3, r3, #32
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	4833      	ldr	r0, [pc, #204]	; (80047ec <_printf_i+0x240>)
 8004720:	2778      	movs	r7, #120	; 0x78
 8004722:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	6829      	ldr	r1, [r5, #0]
 800472a:	061f      	lsls	r7, r3, #24
 800472c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004730:	d402      	bmi.n	8004738 <_printf_i+0x18c>
 8004732:	065f      	lsls	r7, r3, #25
 8004734:	bf48      	it	mi
 8004736:	b2b6      	uxthmi	r6, r6
 8004738:	07df      	lsls	r7, r3, #31
 800473a:	bf48      	it	mi
 800473c:	f043 0320 	orrmi.w	r3, r3, #32
 8004740:	6029      	str	r1, [r5, #0]
 8004742:	bf48      	it	mi
 8004744:	6023      	strmi	r3, [r4, #0]
 8004746:	b91e      	cbnz	r6, 8004750 <_printf_i+0x1a4>
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	f023 0320 	bic.w	r3, r3, #32
 800474e:	6023      	str	r3, [r4, #0]
 8004750:	2310      	movs	r3, #16
 8004752:	e7a7      	b.n	80046a4 <_printf_i+0xf8>
 8004754:	4824      	ldr	r0, [pc, #144]	; (80047e8 <_printf_i+0x23c>)
 8004756:	e7e4      	b.n	8004722 <_printf_i+0x176>
 8004758:	4615      	mov	r5, r2
 800475a:	e7bd      	b.n	80046d8 <_printf_i+0x12c>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	6826      	ldr	r6, [r4, #0]
 8004760:	6961      	ldr	r1, [r4, #20]
 8004762:	1d18      	adds	r0, r3, #4
 8004764:	6028      	str	r0, [r5, #0]
 8004766:	0635      	lsls	r5, r6, #24
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	d501      	bpl.n	8004770 <_printf_i+0x1c4>
 800476c:	6019      	str	r1, [r3, #0]
 800476e:	e002      	b.n	8004776 <_printf_i+0x1ca>
 8004770:	0670      	lsls	r0, r6, #25
 8004772:	d5fb      	bpl.n	800476c <_printf_i+0x1c0>
 8004774:	8019      	strh	r1, [r3, #0]
 8004776:	2300      	movs	r3, #0
 8004778:	6123      	str	r3, [r4, #16]
 800477a:	4615      	mov	r5, r2
 800477c:	e7bc      	b.n	80046f8 <_printf_i+0x14c>
 800477e:	682b      	ldr	r3, [r5, #0]
 8004780:	1d1a      	adds	r2, r3, #4
 8004782:	602a      	str	r2, [r5, #0]
 8004784:	681d      	ldr	r5, [r3, #0]
 8004786:	6862      	ldr	r2, [r4, #4]
 8004788:	2100      	movs	r1, #0
 800478a:	4628      	mov	r0, r5
 800478c:	f7fb fd28 	bl	80001e0 <memchr>
 8004790:	b108      	cbz	r0, 8004796 <_printf_i+0x1ea>
 8004792:	1b40      	subs	r0, r0, r5
 8004794:	6060      	str	r0, [r4, #4]
 8004796:	6863      	ldr	r3, [r4, #4]
 8004798:	6123      	str	r3, [r4, #16]
 800479a:	2300      	movs	r3, #0
 800479c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a0:	e7aa      	b.n	80046f8 <_printf_i+0x14c>
 80047a2:	6923      	ldr	r3, [r4, #16]
 80047a4:	462a      	mov	r2, r5
 80047a6:	4649      	mov	r1, r9
 80047a8:	4640      	mov	r0, r8
 80047aa:	47d0      	blx	sl
 80047ac:	3001      	adds	r0, #1
 80047ae:	d0ad      	beq.n	800470c <_printf_i+0x160>
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	079b      	lsls	r3, r3, #30
 80047b4:	d413      	bmi.n	80047de <_printf_i+0x232>
 80047b6:	68e0      	ldr	r0, [r4, #12]
 80047b8:	9b03      	ldr	r3, [sp, #12]
 80047ba:	4298      	cmp	r0, r3
 80047bc:	bfb8      	it	lt
 80047be:	4618      	movlt	r0, r3
 80047c0:	e7a6      	b.n	8004710 <_printf_i+0x164>
 80047c2:	2301      	movs	r3, #1
 80047c4:	4632      	mov	r2, r6
 80047c6:	4649      	mov	r1, r9
 80047c8:	4640      	mov	r0, r8
 80047ca:	47d0      	blx	sl
 80047cc:	3001      	adds	r0, #1
 80047ce:	d09d      	beq.n	800470c <_printf_i+0x160>
 80047d0:	3501      	adds	r5, #1
 80047d2:	68e3      	ldr	r3, [r4, #12]
 80047d4:	9903      	ldr	r1, [sp, #12]
 80047d6:	1a5b      	subs	r3, r3, r1
 80047d8:	42ab      	cmp	r3, r5
 80047da:	dcf2      	bgt.n	80047c2 <_printf_i+0x216>
 80047dc:	e7eb      	b.n	80047b6 <_printf_i+0x20a>
 80047de:	2500      	movs	r5, #0
 80047e0:	f104 0619 	add.w	r6, r4, #25
 80047e4:	e7f5      	b.n	80047d2 <_printf_i+0x226>
 80047e6:	bf00      	nop
 80047e8:	080049c5 	.word	0x080049c5
 80047ec:	080049d6 	.word	0x080049d6

080047f0 <memmove>:
 80047f0:	4288      	cmp	r0, r1
 80047f2:	b510      	push	{r4, lr}
 80047f4:	eb01 0402 	add.w	r4, r1, r2
 80047f8:	d902      	bls.n	8004800 <memmove+0x10>
 80047fa:	4284      	cmp	r4, r0
 80047fc:	4623      	mov	r3, r4
 80047fe:	d807      	bhi.n	8004810 <memmove+0x20>
 8004800:	1e43      	subs	r3, r0, #1
 8004802:	42a1      	cmp	r1, r4
 8004804:	d008      	beq.n	8004818 <memmove+0x28>
 8004806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800480a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800480e:	e7f8      	b.n	8004802 <memmove+0x12>
 8004810:	4402      	add	r2, r0
 8004812:	4601      	mov	r1, r0
 8004814:	428a      	cmp	r2, r1
 8004816:	d100      	bne.n	800481a <memmove+0x2a>
 8004818:	bd10      	pop	{r4, pc}
 800481a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800481e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004822:	e7f7      	b.n	8004814 <memmove+0x24>

08004824 <_sbrk_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4d06      	ldr	r5, [pc, #24]	; (8004840 <_sbrk_r+0x1c>)
 8004828:	2300      	movs	r3, #0
 800482a:	4604      	mov	r4, r0
 800482c:	4608      	mov	r0, r1
 800482e:	602b      	str	r3, [r5, #0]
 8004830:	f7fc f976 	bl	8000b20 <_sbrk>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d102      	bne.n	800483e <_sbrk_r+0x1a>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	b103      	cbz	r3, 800483e <_sbrk_r+0x1a>
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	20000368 	.word	0x20000368

08004844 <memcpy>:
 8004844:	440a      	add	r2, r1
 8004846:	4291      	cmp	r1, r2
 8004848:	f100 33ff 	add.w	r3, r0, #4294967295
 800484c:	d100      	bne.n	8004850 <memcpy+0xc>
 800484e:	4770      	bx	lr
 8004850:	b510      	push	{r4, lr}
 8004852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800485a:	4291      	cmp	r1, r2
 800485c:	d1f9      	bne.n	8004852 <memcpy+0xe>
 800485e:	bd10      	pop	{r4, pc}

08004860 <_realloc_r>:
 8004860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004864:	4680      	mov	r8, r0
 8004866:	4614      	mov	r4, r2
 8004868:	460e      	mov	r6, r1
 800486a:	b921      	cbnz	r1, 8004876 <_realloc_r+0x16>
 800486c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004870:	4611      	mov	r1, r2
 8004872:	f7ff bc49 	b.w	8004108 <_malloc_r>
 8004876:	b92a      	cbnz	r2, 8004884 <_realloc_r+0x24>
 8004878:	f7ff fbda 	bl	8004030 <_free_r>
 800487c:	4625      	mov	r5, r4
 800487e:	4628      	mov	r0, r5
 8004880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004884:	f000 f81b 	bl	80048be <_malloc_usable_size_r>
 8004888:	4284      	cmp	r4, r0
 800488a:	4607      	mov	r7, r0
 800488c:	d802      	bhi.n	8004894 <_realloc_r+0x34>
 800488e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004892:	d812      	bhi.n	80048ba <_realloc_r+0x5a>
 8004894:	4621      	mov	r1, r4
 8004896:	4640      	mov	r0, r8
 8004898:	f7ff fc36 	bl	8004108 <_malloc_r>
 800489c:	4605      	mov	r5, r0
 800489e:	2800      	cmp	r0, #0
 80048a0:	d0ed      	beq.n	800487e <_realloc_r+0x1e>
 80048a2:	42bc      	cmp	r4, r7
 80048a4:	4622      	mov	r2, r4
 80048a6:	4631      	mov	r1, r6
 80048a8:	bf28      	it	cs
 80048aa:	463a      	movcs	r2, r7
 80048ac:	f7ff ffca 	bl	8004844 <memcpy>
 80048b0:	4631      	mov	r1, r6
 80048b2:	4640      	mov	r0, r8
 80048b4:	f7ff fbbc 	bl	8004030 <_free_r>
 80048b8:	e7e1      	b.n	800487e <_realloc_r+0x1e>
 80048ba:	4635      	mov	r5, r6
 80048bc:	e7df      	b.n	800487e <_realloc_r+0x1e>

080048be <_malloc_usable_size_r>:
 80048be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048c2:	1f18      	subs	r0, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bfbc      	itt	lt
 80048c8:	580b      	ldrlt	r3, [r1, r0]
 80048ca:	18c0      	addlt	r0, r0, r3
 80048cc:	4770      	bx	lr
	...

080048d0 <_init>:
 80048d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d2:	bf00      	nop
 80048d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d6:	bc08      	pop	{r3}
 80048d8:	469e      	mov	lr, r3
 80048da:	4770      	bx	lr

080048dc <_fini>:
 80048dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048de:	bf00      	nop
 80048e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e2:	bc08      	pop	{r3}
 80048e4:	469e      	mov	lr, r3
 80048e6:	4770      	bx	lr
